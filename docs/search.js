window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "clev2er", "modulename": "clev2er", "kind": "module", "doc": "<h1 id=\"clev2er-algorithm-framework\">CLEV2ER Algorithm Framework</h1>\n\n<p><strong>Pre-design</strong> of an Algorithm framework for </p>\n\n<ul>\n<li>CryoTEMPO Land Ice : view the algorithms: <code>clev2er.algorithms.cryotempo</code></li>\n<li>CLEV2ER Land Ice and Inland Waters</li>\n<li>Any other L1b->L2 chain</li>\n</ul>\n\n<h2 id=\"features\">Features</h2>\n\n<ul>\n<li>Command line tool : src/tools/run_chain.py</li>\n<li>input L1b file selection (single file or multiple files)</li>\n<li>dynamic algorithm loading from YML list(s)\n<ul>\n<li>algorithms are classes of type Algorithm with .__init__(), .process(), .finalize()</li>\n<li>Algorithm.init() is called before any L1b file processing.</li>\n<li>Algorithm.process() is called on every L1b file,</li>\n<li>Algorithm.finalize() is called after all files have been processed.</li>\n<li>Each algorithm has access to: l1b Dataset, shared working dict, config dict</li>\n</ul></li>\n<li>logging (+ multi-processing logging support)</li>\n<li>multi-processing (1 core per l1b file), configurable maximum number of cores.</li>\n<li>algorithm timing (with MP support)</li>\n<li>chain timing</li>\n</ul>\n\n<h2 id=\"packagingworkflow\">Packaging/Workflow</h2>\n\n<ul>\n<li><p>pre-commit git hooks for automated static code analysis. \nThese tools run whenever you do a <code>git commit</code>. \nThe commit will fail if any of the tests fail for the following tools:  </p>\n\n<ul>\n<li>lint</li>\n<li>flake8</li>\n<li>black</li>\n<li>pylint</li>\n<li>isort </li>\n<li>mypy </li>\n</ul></li>\n<li><p>poetry package dependency management</p></li>\n<li>pdoc automated documentation to GitHub pages</li>\n</ul>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>Make sure you have <em>git</em> installed on your system.  </p>\n\n<p>Clone the git repository: </p>\n\n<p>with https: <br />\n<code>git clone https://github.com/cpomsoft/clev2er.git</code>  </p>\n\n<p>or with ssh: <br />\n<code>git clone git@github.com:cpomsoft/clev2er.git</code>  </p>\n\n<p>or with the GitHub CLI: <br />\n<code>gh repo clone cpomsoft/clev2er</code>  </p>\n\n<h2 id=\"environment-setup\">Environment Setup</h2>\n\n<p>The following environment variables need to be set. In a bash shell this might be done\nby adding export lines to your $HOME/.bash_profile file.  </p>\n\n<p>Set the <em>CLEV2ER_BASE_DIR</em> environment variable to the root of the clev2er package.  Then set\nthe PYTHONPATH to point to the packages src directory. Here is an example:  </p>\n\n<pre><code>export CLEV2ER_BASE_DIR=/Users/alanmuir/software/clev2er\nexport PYTHONPATH=$PYTHONPATH:$CLEV2ER_BASE_DIR/src\n</code></pre>\n\n<h2 id=\"virtual-environment-and-package-requirements\">Virtual Environment and Package Requirements</h2>\n\n<p>This project uses <em>poetry</em> to manage package dependencies and virtual envs.  </p>\n\n<p>First, you need to install <em>poetry</em> on your system from \n<a href=\"https://python-poetry.org/docs/#installation\">https://python-poetry.org/docs/#installation</a>.  </p>\n\n<p>Run the following command to install python dependencies for this package\n(for info, it uses settings in pyproject.toml to know what to install)</p>\n\n<p><code>poetry install</code>  </p>\n\n<p>Finally, to load the virtual env, type:  </p>\n\n<p><code>poetry shell</code>  </p>\n\n<p>You should now be setup to run processing chains, etc.</p>\n\n<h2 id=\"example-of-running-the-chain\">Example of Running the Chain</h2>\n\n<p>This example runs the processing chain <em>cryotempo</em> on every L1b file in \n/path/to/l1b_files. It uses all the default configuration files for that chain.</p>\n\n<pre><code>cd $CLEV2ER_BASE_DIR/src/clev2er/tools\npython run_chain.py --name cryotempo -d /path/to/l1b_files\n</code></pre>\n\n<p>To find all the command line options for <em>run_chain.py</em>, type:  </p>\n\n<p><code>python run_chain.py -h</code></p>\n\n<h2 id=\"developer-notes\">Developer Notes</h2>\n\n<p>graph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;</p>\n\n<h3 id=\"automatic-documentation\">Automatic documentation</h3>\n\n<p>This user manual is hosted on GitHub pages (<a href=\"https://cpomsoft.github.io/clev2er\">https://cpomsoft.github.io/clev2er</a>)</p>\n\n<p>Content is created from doctrings (optionally containing Markdown) in the code, \nusing the <em>pdoc</em> package : <a href=\"https://pdoc.dev\">https://pdoc.dev</a></p>\n\n<p>The site is locally built in <code>$CLEV2ER_BASE_DIR/docs</code>, using a pre-commit hook \n(hook id: pdocs_build).\nHooks are configured in <code>$CLEV2ER_BASE_DIR/.pre-commit-config.yaml</code></p>\n\n<p>The hook calls the script <code>$CLEV2ER_BASE_DIR/pdocs_build.sh</code> to build the site \nwhenever a <code>git commit</code> is run.</p>\n\n<p>When a <code>git push</code> is run, GitHub automatically extracts the site from the \ndocs directory and publishes it.</p>\n\n<p>The front page of the site (ie this page) is located in the doctring within \n<code>$CLEV2ER_BASE_DIR/src/clev2er/__init__.py</code>.</p>\n\n<p>The docstring within <code>__init__.py</code> of each package directory should provide\nmarkdown to describe the directories beneath it.</p>\n"}, {"fullname": "clev2er.algorithms", "modulename": "clev2er.algorithms", "kind": "module", "doc": "<hr />\n\n<h2 id=\"top-level-algorithm-description\">Top Level Algorithm Description</h2>\n\n<p>The clev2er -> <strong>algorithms</strong> contains directories for each chain, using the chain name.  </p>\n\n<p>For example:  </p>\n\n<p><code>clev2er/algorithms/cryotempo</code>  </p>\n\n<p>in this case <strong>cryotempo</strong> is the chain name.</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo", "modulename": "clev2er.algorithms.cryotempo", "kind": "module", "doc": "<h1 id=\"algorithms-for-the-cryotempo-land-ice-chain\">Algorithms for the cryotempo land ice chain</h1>\n\n<p>Contains all algorithms for the ESA CryoTEMPO Project's land ice\ntheme.</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "modulename": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to load the corresponding CATS2008a tide correction file\nand extract the tide corrections.</p>\n\n<p><strong>Requires from shared dictionary</strong>:</p>\n\n<ul>\n<li><code>shared_dict[\"l1b_file_name\"]</code> : str</li>\n<li><code>shared_dict[\"hemisphere\"]</code> : str</li>\n<li><code>shared_dict[\"instr_mode\"]</code> : str</li>\n<li><code>shared_dict[\"num_20hz_records\"]</code> : int</li>\n</ul>\n\n<p><strong>Outputs to shared dictionary</strong>:</p>\n\n<ul>\n<li><code>shared_dict[\"cats_tide\"]</code> : np.ndarray</li>\n</ul>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction.Algorithm.__init__", "modulename": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "qualname": "Algorithm.__init__", "kind": "function", "doc": "<p>runs init() function to initialize Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  chain configuration dictionary</li>\n</ul>\n\n<p>Returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span></span>)</span>"}, {"fullname": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mplog (logging.Logger):</strong>  log instance to use</li>\n<li><strong>filenum (int):</strong>  file number being processed</li>\n</ul>\n\n<p>Returns: (bool,str) : success or failure, error string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mplog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>, </span><span class=\"param\"><span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Algorithm to retrieve the CATS2008a Antarctic tide correction for l1b file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n<li><strong>mplog (logging.Logger):</strong>  multi-processing safe logger to use</li>\n<li><strong>filenum (int) :</strong>  file number of list of L1b files</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p>IMPORTANT NOTE: when logging within this function you must use the mplog logger\nwith a filenum as an argument as follows:\nmplog.debug,info,error(\"[f%d] your message\",filenum)\nThis is required to support logging during multi-processing</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">mplog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>,</span><span class=\"param\">\t<span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final algorithm actions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "modulename": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_dilated_coastal_mask</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to\nForm a mask array of points to include from a 10km dilated Ant or Grn coastal mask.\nDilated coastal masks come from the Mask class :\nMask('antarctica_iceandland_dilated_10km_grid_mask')\nMask('greenland_iceandland_dilated_10km_grid_mask')</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask.Algorithm.__init__", "modulename": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "qualname": "Algorithm.__init__", "kind": "function", "doc": "<p>initializes the Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  configuration dictionary</li>\n</ul>\n\n<p>Returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span></span>)</span>"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Loads Bedmachine surface type Masks</p>\n\n<p>Returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mplog</span>, </span><span class=\"param\"><span class=\"n\">filenum</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>CLEV2ER Algorithm</p>\n\n<p>Interpolate surface type data from Bedmachine for nadir locations of L1b\nTranspose surface type values from Bedmachine grid to CryoTEMPO values:\n0=ocean, 1=grounded_ice, 2=floating_ice, 3=ice_free_land,4=non-Greenland land</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n<li><strong>mplog:</strong>  multi-processing safe logger to use</li>\n<li><strong>filenum (int) :</strong>  file number of list of L1b files</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p>IMPORTANT NOTE: when logging within this function you must use the mplog logger\nwith a filenum as an argument as follows:\nmplog.debug,info,error(\"[f%d] your message\",filenum)\nThis is required to support logging during multi-processing</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">l1b</span>, </span><span class=\"param\"><span class=\"n\">shared_dict</span>, </span><span class=\"param\"><span class=\"n\">mplog</span>, </span><span class=\"param\"><span class=\"n\">filenum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final algorithm actions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dump", "modulename": "clev2er.algorithms.cryotempo.alg_dump", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_dump</p>\n\n<p>print the shared_dict</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dump.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_dump", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dump.Algorithm.__init__", "modulename": "clev2er.algorithms.cryotempo.alg_dump", "qualname": "Algorithm.__init__", "kind": "function", "doc": "<p>initializes the Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  configuration dictionary</li>\n</ul>\n\n<p>Returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dump.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_dump", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mplog (logging.Logger):</strong>  log instance to use</li>\n<li><strong>filenum (int):</strong>  file number being processed</li>\n</ul>\n\n<p>Returns: (bool,str) : success or failure, error string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mplog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>, </span><span class=\"param\"><span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dump.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_dump", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>CLEV2ER Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n<li><strong>mplog (logging.Logger):</strong>  multi-processing safe logger to use</li>\n<li><strong>filenum (int) :</strong>  file number of list of L1b files</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p>IMPORTANT NOTE: when logging within this function you must use the mplog logger\nwith a filenum as an argument as follows:\nmplog.debug,info,error(\"[f%d] your message\",filenum)\nThis is required to support logging during multi-processing</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">mplog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>,</span><span class=\"param\">\t<span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dump.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_dump", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final algorithm actions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "modulename": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to get FES2014b tide correction for locations in l1b file</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction.Algorithm.__init__", "modulename": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "qualname": "Algorithm.__init__", "kind": "function", "doc": "<p>initializes the Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  configuration dictionary</li>\n</ul>\n\n<p>Returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span></span>)</span>"}, {"fullname": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mplog (logging.Logger):</strong>  log instance to use</li>\n<li><strong>filenum (int):</strong>  file number being processed</li>\n</ul>\n\n<p>Returns: (bool,str) : success or failure, error string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mplog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>, </span><span class=\"param\"><span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>CLEV2ER Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n<li><strong>mplog (logging.Logger):</strong>  multi-processing safe logger to use</li>\n<li><strong>filenum (int) :</strong>  file number of list of L1b files</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p>IMPORTANT NOTE: when logging within this function you must use the mplog logger\nwith a filenum as an argument as follows:\nmplog.debug,info,error(\"[f%d] your message\",filenum)\nThis is required to support logging during multi-processing</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">mplog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>,</span><span class=\"param\">\t<span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final algorithm actions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geo_corrections", "modulename": "clev2er.algorithms.cryotempo.alg_geo_corrections", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_geo_corrections</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geo_corrections.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_geo_corrections", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to calculate geophysical corrections for l1b file</p>\n\n<p>1b) Calculate sum of geo-corrections\nFloating ice/ocean: DRY + WET + DAC + GIM + OT + LPEOT + OLT + SET + GPT\nLand ice:           DRY + WET +       GIM +              OLT + SET + GPT\nto be stored in a new netcdf variable: sum_cor_20_ku\nUse ind_meas_1hz_20_ku to find index in 20hz</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geo_corrections.Algorithm.__init__", "modulename": "clev2er.algorithms.cryotempo.alg_geo_corrections", "qualname": "Algorithm.__init__", "kind": "function", "doc": "<p>initializes the Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  configuration dictionary</li>\n</ul>\n\n<p>Returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span></span>)</span>"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geo_corrections.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_geo_corrections", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mplog (logging.Logger):</strong>  log instance to use</li>\n<li><strong>filenum (int):</strong>  file number being processed</li>\n</ul>\n\n<p>Returns: (bool,str) : success or failure, error string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mplog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>, </span><span class=\"param\"><span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geo_corrections.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_geo_corrections", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>CLEV2ER Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n<li><strong>mplog:</strong>  multi-processing safe logger to use</li>\n<li><strong>filenum (int) :</strong>  file number of list of L1b files</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p>IMPORTANT NOTE: when logging within this function you must use the mplog logger\nwith a filenum as an argument as follows:\nmplog.debug,info,error(\"[f%d] your message\",filenum)\nThis is required to support logging during multi-processing</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">mplog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>,</span><span class=\"param\">\t<span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geo_corrections.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_geo_corrections", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final algorithm actions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_identify_file", "modulename": "clev2er.algorithms.cryotempo.alg_identify_file", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_template</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_identify_file.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_identify_file", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to <strong>identify L1b file</strong>,</p>\n\n<ol>\n<li>find the instrument mode</li>\n<li>find the number of records</li>\n</ol>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_identify_file.Algorithm.__init__", "modulename": "clev2er.algorithms.cryotempo.alg_identify_file", "qualname": "Algorithm.__init__", "kind": "function", "doc": "<p>initializes the Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  configuration dictionary</li>\n</ul>\n\n<p>Returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span></span>)</span>"}, {"fullname": "clev2er.algorithms.cryotempo.alg_identify_file.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_identify_file", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_identify_file.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_identify_file", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Algorithm to set:</p>\n\n<p>shared_dict[\"num_20hz_records\"]\nshared_dict[\"instr_mode\"]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n<li><strong>mplog:</strong>  multi-processing safe logger to use</li>\n<li><strong>filenum (int) :</strong>  file number of list of L1b files</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<blockquote>\n  <p><strong>IMPORTANT NOTE</strong>: when logging within this function you must use the mplog logger\n  with a filenum as an argument as follows:\n      <code>mplog.error(\"[f%d] your message\",filenum)</code>\n  This is required to support logging during multi-processing</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">l1b</span>, </span><span class=\"param\"><span class=\"n\">shared_dict</span>, </span><span class=\"param\"><span class=\"n\">mplog</span>, </span><span class=\"param\"><span class=\"n\">filenum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_identify_file.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_identify_file", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final algorithm actions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_skip_on_area_bounds</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to do a fast check on whether the l1b file\n   is within area bounds of Antarctica and Greenland.\nDepending on the mode (LRM, SIN) we can reject files that are in\ncertain lat or lon ranges, as we know they do not pass over\nGreenland or Antarctica</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds.Algorithm.__init__", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "qualname": "Algorithm.__init__", "kind": "function", "doc": "<p>initializes the Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  configuration dictionary</li>\n</ul>\n\n<p>Returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span></span>)</span>"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mplog (logger.log) :</strong>  log instance to use</li>\n<li><strong>filenum (int):</strong>  file number being processed</li>\n</ul>\n\n<p>Returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mplog</span>, </span><span class=\"param\"><span class=\"n\">filenum</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>CLEV2ER Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n<li><strong>mplog:</strong>  multi-processing safe logger to use</li>\n<li><strong>filenum (int) :</strong>  file number of list of L1b files</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">l1b</span>, </span><span class=\"param\"><span class=\"n\">shared_dict</span>, </span><span class=\"param\"><span class=\"n\">mplog</span>, </span><span class=\"param\"><span class=\"n\">filenum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final algorithm actions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_mode", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_mode", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_skip_on_mode</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_mode.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_mode", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to find the instrument mode in a CS2 L1b file</p>\n\n<p>if mode is LRM or SIN, shared_dict['instr_mode] is set to 'LRM' or 'SIN'</p>\n\n<p>if mode is SAR, return (False,\"SKIP_OK...\")</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_mode.Algorithm.__init__", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_mode", "qualname": "Algorithm.__init__", "kind": "function", "doc": "<p>initializes the Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  configuration dictionary</li>\n</ul>\n\n<p>Returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span></span>)</span>"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_mode.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_mode", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>CLEV2ER Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n<li><strong>mplog:</strong>  multi-processing safe logger to use</li>\n<li><strong>filenum (int) :</strong>  file number of list of L1b files</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">l1b</span>, </span><span class=\"param\"><span class=\"n\">shared_dict</span>, </span><span class=\"param\"><span class=\"n\">mplog</span>, </span><span class=\"param\"><span class=\"n\">filenum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_mode.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_mode", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final algorithm actions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_surface_type", "modulename": "clev2er.algorithms.cryotempo.alg_surface_type", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_surface_type</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_surface_type.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_surface_type", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to find the surface type from Bedmachine v2 (ANT)/v3 (GRN)\ncorresponding to L1b records\n Uses\n Bedmachine v2 for Antarctica : <a href=\"https://nsidc.org/data/nsidc-0756/versions/2\">https://nsidc.org/data/nsidc-0756/versions/2</a>\n             cpom mask : antarctica_bedmachine_v2_grid_mask\n Bedmachine v3 for Greenland : <a href=\"https://nsidc.org/data/idbmg4\">https://nsidc.org/data/idbmg4</a>\n             cpom mask: greenland_bedmachine_v3_grid_mask\n Antarctica mask values: 0,1,2,3,4 = ocean ice_free_land grounded_ice\n                                    floating_ice lake_vostok\n Greenland mask values: 0,1,2,3,4 = ocean ice_free_land grounded_ice floating_ice\n                                    non-Greenland land</p>\n\n<p>Remap to Cryo-TEMPO surface type values (from ATBD):</p>\n\n<p>Antarctica:\n   CT --  surface (source value)\n         0  --  ocean (0)\n         1  --  grounded ice (2 (grounded Ice) and 4 (Lake Vostok))\n         2  --  floating ice (3)\n         3  --  ice free land (1)</p>\n\n<p>Greenland:\n   CT --  surface (source value)\n         0  --  ocean (0)\n         1  --  grounded ice (2)\n         2  --  floating ice (3)\n         3  --  ice free land (1)\n         4  --  non-Greenland land (4)</p>\n\n<hr />\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_surface_type.Algorithm.__init__", "modulename": "clev2er.algorithms.cryotempo.alg_surface_type", "qualname": "Algorithm.__init__", "kind": "function", "doc": "<p>initializes the Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  configuration dictionary</li>\n</ul>\n\n<p>Returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span></span>)</span>"}, {"fullname": "clev2er.algorithms.cryotempo.alg_surface_type.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_surface_type", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Loads Bedmachine surface type Masks</p>\n\n<p>Returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mplog</span>, </span><span class=\"param\"><span class=\"n\">filenum</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_surface_type.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_surface_type", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>CLEV2ER Algorithm</p>\n\n<p>Interpolate surface type data from Bedmachine for nadir locations of L1b\nTranspose surface type values from Bedmachine grid to CryoTEMPO values:\n0=ocean, 1=grounded_ice, 2=floating_ice, 3=ice_free_land,4=non-Greenland land</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n<li><strong>mplog:</strong>  multi-processing safe logger to use</li>\n<li><strong>filenum (int) :</strong>  file number of list of L1b files</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p>IMPORTANT NOTE: when logging within this function you must use the mplog logger\nwith a filenum as an argument as follows:\nmplog.debug,info,error(\"[f%d] your message\",filenum)\nThis is required to support logging during multi-processing</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">l1b</span>, </span><span class=\"param\"><span class=\"n\">shared_dict</span>, </span><span class=\"param\"><span class=\"n\">mplog</span>, </span><span class=\"param\"><span class=\"n\">filenum</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_surface_type.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_surface_type", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final algorithm actions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_waveform_quality", "modulename": "clev2er.algorithms.cryotempo.alg_waveform_quality", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_waveform_quality</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_waveform_quality.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_waveform_quality", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to perform waveform quality checks</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_waveform_quality.Algorithm.__init__", "modulename": "clev2er.algorithms.cryotempo.alg_waveform_quality", "qualname": "Algorithm.__init__", "kind": "function", "doc": "<p>initializes the Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  configuration dictionary</li>\n</ul>\n\n<p>Returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "clev2er.algorithms.cryotempo.alg_waveform_quality.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_waveform_quality", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mplog (logging.Logger):</strong>  log instance to use</li>\n<li><strong>filenum (int):</strong>  file number being processed</li>\n</ul>\n\n<p>Returns: (bool,str) : success or failure, error string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mplog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>, </span><span class=\"param\"><span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_waveform_quality.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_waveform_quality", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>CLEV2ER Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n<li><strong>mplog (logging.Logger):</strong>  multi-processing safe logger to use</li>\n<li><strong>filenum (int) :</strong>  file number of list of L1b files</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p>IMPORTANT NOTE: when logging within this function you must use the mplog logger\nwith a filenum as an argument as follows:\nmplog.debug,info,error(\"[f%d] your message\",filenum)\nThis is required to support logging during multi-processing</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">mplog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>,</span><span class=\"param\">\t<span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_waveform_quality.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_waveform_quality", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final algorithm actions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.templates", "modulename": "clev2er.algorithms.templates", "kind": "module", "doc": "<p>This module contains an algorithm template which should be the <em>basis</em> for\nall new algorithms in the CLEV2ER project</p>\n"}, {"fullname": "clev2er.algorithms.templates.algorithm_template", "modulename": "clev2er.algorithms.templates.algorithm_template", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_template</p>\n"}, {"fullname": "clev2er.algorithms.templates.algorithm_template.Algorithm", "modulename": "clev2er.algorithms.templates.algorithm_template", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to</p>\n"}, {"fullname": "clev2er.algorithms.templates.algorithm_template.Algorithm.__init__", "modulename": "clev2er.algorithms.templates.algorithm_template", "qualname": "Algorithm.__init__", "kind": "function", "doc": "<p>initializes the Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  configuration dictionary</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "clev2er.algorithms.templates.algorithm_template.Algorithm.init", "modulename": "clev2er.algorithms.templates.algorithm_template", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mplog (logging.Logger):</strong>  log instance to use</li>\n<li><strong>filenum (int):</strong>  file number being processed</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mplog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>, </span><span class=\"param\"><span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.templates.algorithm_template.Algorithm.process", "modulename": "clev2er.algorithms.templates.algorithm_template", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>CLEV2ER Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n<li><strong>mplog (logging.Logger):</strong>  multi-processing safe logger to use</li>\n<li><strong>filenum (int) :</strong>  file number of list of L1b files</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p>IMPORTANT NOTE: when logging within this function you must use the mplog logger\nwith a filenum as an argument as follows:\nmplog.debug,info,error(\"[f%d] your message\",filenum)\nThis is required to support logging during multi-processing</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">mplog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>,</span><span class=\"param\">\t<span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.templates.algorithm_template.Algorithm.finalize", "modulename": "clev2er.algorithms.templates.algorithm_template", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final algorithm actions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.templates.test", "modulename": "clev2er.algorithms.templates.test", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_template</p>\n"}, {"fullname": "clev2er.algorithms.templates.test.Algorithm", "modulename": "clev2er.algorithms.templates.test", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to</p>\n"}, {"fullname": "clev2er.algorithms.templates.test.Algorithm.__init__", "modulename": "clev2er.algorithms.templates.test", "qualname": "Algorithm.__init__", "kind": "function", "doc": "<p>initializes the Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  configuration dictionary</li>\n</ul>\n\n<p>Returns: \n    None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "clev2er.algorithms.templates.test.Algorithm.init", "modulename": "clev2er.algorithms.templates.test", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mplog (logging.Logger):</strong>  log instance to use</li>\n<li><strong>filenum (int):</strong>  file number being processed</li>\n</ul>\n\n<p>Returns: \n    (bool,str) : success or failure, error string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mplog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>, </span><span class=\"param\"><span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.templates.test.Algorithm.process", "modulename": "clev2er.algorithms.templates.test", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>CLEV2ER Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n<li><strong>mplog (logging.Logger):</strong>  multi-processing safe logger to use</li>\n<li><strong>filenum (int) :</strong>  file number of list of L1b files</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p>IMPORTANT NOTE: when logging within this function you must use the mplog logger\nwith a filenum as an argument as follows:\nmplog.debug,info,error(\"[f%d] your message\",filenum)\nThis is required to support logging during multi-processing</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">mplog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>,</span><span class=\"param\">\t<span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.templates.test.Algorithm.finalize", "modulename": "clev2er.algorithms.templates.test", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final algorithm actions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils", "modulename": "clev2er.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.cs2", "modulename": "clev2er.utils.cs2", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.cs2.waveform_quality", "modulename": "clev2er.utils.cs2.waveform_quality", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks", "modulename": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks", "kind": "module", "doc": "<p>Waveform QC checks for CryoSat</p>\n"}, {"fullname": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks.sarin_waveform_qc_checks", "modulename": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks", "qualname": "sarin_waveform_qc_checks", "kind": "function", "doc": "<p>Inputs:\npwr_waveform_20_ku   :  numpy.ndarray of shape (num_measurements, waveform_numbins).\n                waveform_numbins is 128 (LRM) or 1024 (SIN)\n               This is the array returned by :\n               waveforms = nc.variables['pwr_waveform_20_ku'][:].data</p>\n\n<p>Return values:</p>\n\n<p>waveforms_ok :  boolean array of True (waveform ok), False (waveform not suitable)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pwr_waveform_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">echo_scale_factor_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">echo_scale_pwr_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">noise_power_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">total_power_threshold</span><span class=\"o\">=</span><span class=\"mf\">5e-17</span>,</span><span class=\"param\">\t<span class=\"n\">low_peakiness_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">low_position_max_power</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">high_position_max_power</span><span class=\"o\">=</span><span class=\"mi\">1011</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks.lrm_waveform_qc_checks", "modulename": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks", "qualname": "lrm_waveform_qc_checks", "kind": "function", "doc": "<p>Inputs:\npwr_waveform_20_ku   :  numpy.ndarray of shape (num_measurements, waveform_numbins).\n                waveform_numbins is 128 (LRM) or 1024 (SIN)\n               This is the array returned by :\n               waveforms = nc.variables['pwr_waveform_20_ku'][:].data</p>\n\n<p>Return values:</p>\n\n<p>waveforms_ok :  boolean array of True (waveform ok), False (waveform not suitable)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pwr_waveform_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">echo_scale_factor_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">echo_scale_pwr_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">total_power_threshold</span><span class=\"o\">=</span><span class=\"mf\">3e-16</span>,</span><span class=\"param\">\t<span class=\"n\">low_peakiness_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.85</span>,</span><span class=\"param\">\t<span class=\"n\">high_peakiness_threshold</span><span class=\"o\">=</span><span class=\"mf\">2.8</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.logging", "modulename": "clev2er.utils.logging", "kind": "module", "doc": "<p>logging helper functions:</p>\n\n<p>get_logger() :  sets up logging system to write log.ERROR, INFO, DEBUG to separate\n                log files, and also output to stdout</p>\n"}, {"fullname": "clev2er.utils.logging.get_logger", "modulename": "clev2er.utils.logging", "qualname": "get_logger", "kind": "function", "doc": "<p>Setup Logging handlers</p>\n\n<ul>\n<li>direct log.ERROR messages -> separate log file</li>\n<li>direct log.INFO (including log.ERROR, log.WARNING) -> separate log file</li>\n<li>direct log.DEBUG (including log.ERROR, log.WARNING, log.INFO) -> separate log file</li>\n<li>direct all allowed levels to stout</li>\n<li>set maximum allowed log level (applies to all outputs, default is log.INFO,</li>\n<li>ie no log.DEBUG messages will be included by default)</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>log_format (str) :</strong>  formatting string for logger</li>\n<li><strong>log_name (str) :</strong> </li>\n<li><strong>log_file_info (str) :</strong>  path of log file to use for INFO logs</li>\n<li><strong>log_file_error (str) :</strong>  path of log file to use for ERROR logs</li>\n<li><strong>log_file_debug (str) :</strong>  path of log file to use for DEBUG logs</li>\n<li><strong>default_log_level () :</strong>  default=logging.INFO</li>\n<li><strong>silent (bool) :</strong>  if True do not output to stdout, default=False</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>log object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">log_format</span><span class=\"o\">=</span><span class=\"s1\">&#39;[</span><span class=\"si\">%(levelname)-2s</span><span class=\"s1\">] : </span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> : </span><span class=\"si\">%(name)-12s</span><span class=\"s1\"> :  </span><span class=\"si\">%(message)s</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log_file_info</span><span class=\"o\">=</span><span class=\"s1\">&#39;info.log&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log_file_error</span><span class=\"o\">=</span><span class=\"s1\">&#39;err.log&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log_file_debug</span><span class=\"o\">=</span><span class=\"s1\">&#39;debug.log&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">default_log_level</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">silent</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks", "modulename": "clev2er.utils.masks", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.masks.mask_mp_test", "modulename": "clev2er.utils.masks.mask_mp_test", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.masks.mask_mp_test.Mask", "modulename": "clev2er.utils.masks.mask_mp_test", "qualname": "Mask", "kind": "class", "doc": "<p>class to handle area masking</p>\n"}, {"fullname": "clev2er.utils.masks.mask_mp_test.Mask.__init__", "modulename": "clev2er.utils.masks.mask_mp_test", "qualname": "Mask.__init__", "kind": "function", "doc": "<p>class initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_name (str):</strong>  mask name, must be in global mask_list</li>\n<li><strong>basin_numbers (list[int], optional):</strong>  list of grid values to select from grid masks\ndef=None</li>\n<li><strong>mask_path (str, optional):</strong>  override default path of mask data file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mask_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">basin_numbers</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mask_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "clev2er.utils.masks.mask_mp_test.Mask.points_inside", "modulename": "clev2er.utils.masks.mask_mp_test", "qualname": "Mask.points_inside", "kind": "function", "doc": "<p>find points inside mask</p>\n\n<p>returns array of bool indicating where (lat,lon) or (x,y) points  are inside a mask.\nIt also returns (x,y) of all points to save having to transform\nthem again.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray|list[float]):</strong>  list of latitude points</li>\n<li><strong>lons (np.ndarray|list[float]):</strong>  list of longitude points</li>\n<li><strong>basin_numbers (list[int,], optional):</strong>  list of basin numbers. Defaults to None.</li>\n<li><strong>inputs_are_xy (bool, optional):</strong>  lats, lons are already transformed to x,y.\nDefaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>inmask(np.ndarray),x(np.ndarray),y(np.ndarray) : true where inside mask,\n                                                   transformed x locations, (all points)\n                                                   transformed y locations (all points)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">basin_numbers</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.mask_mp_test.Mask.grid_mask_values", "modulename": "clev2er.utils.masks.mask_mp_test", "qualname": "Mask.grid_mask_values", "kind": "function", "doc": "<p>Return the grid mask value at each input lats, lons interpolated grid location</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray):</strong>  array of latitude (N) values in degrees</li>\n<li><strong>lons (np.ndarray):</strong>  array of longitude (E) values in degrees</li>\n<li><strong>inputs_are_xy (bool):</strong>  inputs are x,y values (m) instead of latitude, longitude values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>mask_values (np.ndarray): grid mask value at each input lats, lons interpolated\n                       grid location or np.NaN is outside area</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.mask_mp_test.Mask.latlon_to_xy", "modulename": "clev2er.utils.masks.mask_mp_test", "qualname": "Mask.latlon_to_xy", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lats</strong>:  latitude points in degs</li>\n<li><strong>lons</strong>:  longitude points in degrees E</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>x,y in polar stereo projection of mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.mask_mp_test.Algorithm", "modulename": "clev2er.utils.masks.mask_mp_test", "qualname": "Algorithm", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.masks.mask_mp_test.Algorithm.process", "modulename": "clev2er.utils.masks.mask_mp_test", "qualname": "Algorithm.process", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">i</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.mask_mp_test2", "modulename": "clev2er.utils.masks.mask_mp_test2", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.masks.mask_mp_test2.Mask", "modulename": "clev2er.utils.masks.mask_mp_test2", "qualname": "Mask", "kind": "class", "doc": "<p>class to handle area masking</p>\n"}, {"fullname": "clev2er.utils.masks.mask_mp_test2.Mask.__init__", "modulename": "clev2er.utils.masks.mask_mp_test2", "qualname": "Mask.__init__", "kind": "function", "doc": "<p>class initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_name (str):</strong>  mask name, must be in global mask_list</li>\n<li><strong>basin_numbers (list[int], optional):</strong>  list of grid values to select from grid masks\ndef=None</li>\n<li><strong>mask_path (str, optional):</strong>  override default path of mask data file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mask_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">basin_numbers</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mask_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "clev2er.utils.masks.mask_mp_test2.Mask.points_inside", "modulename": "clev2er.utils.masks.mask_mp_test2", "qualname": "Mask.points_inside", "kind": "function", "doc": "<p>find points inside mask</p>\n\n<p>returns array of bool indicating where (lat,lon) or (x,y) points  are inside a mask.\nIt also returns (x,y) of all points to save having to transform\nthem again.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray|list[float]):</strong>  list of latitude points</li>\n<li><strong>lons (np.ndarray|list[float]):</strong>  list of longitude points</li>\n<li><strong>basin_numbers (list[int,], optional):</strong>  list of basin numbers. Defaults to None.</li>\n<li><strong>inputs_are_xy (bool, optional):</strong>  lats, lons are already transformed to x,y.\nDefaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>inmask(np.ndarray),x(np.ndarray),y(np.ndarray) : true where inside mask,\n                                                   transformed x locations, (all points)\n                                                   transformed y locations (all points)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">basin_numbers</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.mask_mp_test2.Mask.grid_mask_values", "modulename": "clev2er.utils.masks.mask_mp_test2", "qualname": "Mask.grid_mask_values", "kind": "function", "doc": "<p>Return the grid mask value at each input lats, lons interpolated grid location</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray):</strong>  array of latitude (N) values in degrees</li>\n<li><strong>lons (np.ndarray):</strong>  array of longitude (E) values in degrees</li>\n<li><strong>inputs_are_xy (bool):</strong>  inputs are x,y values (m) instead of latitude, longitude values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>mask_values (np.ndarray): grid mask value at each input lats, lons interpolated\n                       grid location or np.NaN is outside area</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.mask_mp_test2.Mask.latlon_to_xy", "modulename": "clev2er.utils.masks.mask_mp_test2", "qualname": "Mask.latlon_to_xy", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lats</strong>:  latitude points in degs</li>\n<li><strong>lons</strong>:  longitude points in degrees E</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>x,y in polar stereo projection of mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.mask_mp_test2.Algorithm", "modulename": "clev2er.utils.masks.mask_mp_test2", "qualname": "Algorithm", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "clev2er.utils.masks.mask_mp_test2.Algorithm.__init__", "modulename": "clev2er.utils.masks.mask_mp_test2", "qualname": "Algorithm.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mask</span></span>)</span>"}, {"fullname": "clev2er.utils.masks.mask_mp_test2.Algorithm.process", "modulename": "clev2er.utils.masks.mask_mp_test2", "qualname": "Algorithm.process", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">i</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.masks", "modulename": "clev2er.utils.masks.masks", "kind": "module", "doc": "<p>Class for area masking</p>\n"}, {"fullname": "clev2er.utils.masks.masks.Mask", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask", "kind": "class", "doc": "<p>class to handle area masking</p>\n"}, {"fullname": "clev2er.utils.masks.masks.Mask.__init__", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.__init__", "kind": "function", "doc": "<p>class initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_name (str):</strong>  mask name, must be in global mask_list</li>\n<li><strong>basin_numbers (list[int], optional):</strong>  list of grid values to select from grid masks\ndef=None</li>\n<li><strong>mask_path (str, optional):</strong>  override default path of mask data file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mask_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">basin_numbers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mask_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "clev2er.utils.masks.masks.Mask.points_inside", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.points_inside", "kind": "function", "doc": "<p>find points inside mask</p>\n\n<p>returns array of bool indicating where (lat,lon) or (x,y) points  are inside a mask.\nIt also returns (x,y) of all points to save having to transform\nthem again.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray|list[float]):</strong>  list of latitude points</li>\n<li><strong>lons (np.ndarray|list[float]):</strong>  list of longitude points</li>\n<li><strong>basin_numbers (list[int,], optional):</strong>  list of basin numbers. Defaults to None.</li>\n<li><strong>inputs_are_xy (bool, optional):</strong>  lats, lons are already transformed to x,y.\nDefaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>inmask(np.ndarray),x(np.ndarray),y(np.ndarray) : true where inside mask,\n                                                   transformed x locations, (all points)\n                                                   transformed y locations (all points)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">basin_numbers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.masks.Mask.grid_mask_values", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.grid_mask_values", "kind": "function", "doc": "<p>Return the grid mask value at each input lats, lons interpolated grid location</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray):</strong>  array of latitude (N) values in degrees</li>\n<li><strong>lons (np.ndarray):</strong>  array of longitude (E) values in degrees</li>\n<li><strong>inputs_are_xy (bool):</strong>  inputs are x,y values (m) instead of latitude, longitude values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>mask_values (np.ndarray): grid mask value at each input lats, lons interpolated\n                       grid location or np.NaN is outside area</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.masks.Mask.latlon_to_xy", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.latlon_to_xy", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lats</strong>:  latitude points in degs</li>\n<li><strong>lons</strong>:  longitude points in degrees E</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>x,y in polar stereo projection of mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();