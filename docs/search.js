window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "clev2er", "modulename": "clev2er", "kind": "module", "doc": "<h1 id=\"clev2er-l2-algorithm-framework\">CLEV2ER L2 Algorithm Framework</h1>\n\n<p>A generic algorithm framework, designed for (but not restricted to) Level-1b to Level-2 processing \nof ESA radar altimetry mission data. Initial usage is expected for the ESA CryoSat-2 and CRISTAL \nmissions. The key features of the framework are dynamically loaded algorithm classes \n(from YML lists of algorithms) and in-built support for multi-processing and a development\nworkflow. There are many run-time options \nin the chain controller command line tool.</p>\n\n<p>The diagram below shows a simplified representation of the framework and its components.</p>\n\n<pre class=\"mermaid-pre\"><div class=\"mermaid\">graph LR;\n    L1b(L1b)--&gt;Alg1\n    Alg1--&gt;Alg2;\n    Alg2--&gt;Alg3;\n    Alg3--&gt;Alg4;\n    Alg4--&gt;AlgN;\n    AlgN--&gt;L2(L2)\n    S(Shared Dict)\n    S&lt;-.-&gt;Alg1 &amp; Alg3 &amp; Alg4 &amp; AlgN\n    S-.-&gt;Alg2 \n</div></pre>\n\n<pre class=\"mermaid-pre\"><div class=\"mermaid\">graph LR;\n    C(Config)~~~L(Logs)~~~R{{Run Controller}}~~~LI(Alg List)-.-Ch(Chain)\n</div></pre>\n\n<h2 id=\"main-features\">Main Features</h2>\n\n<ul>\n<li>Command line chain controller tool : src/clev2er/tools/run_chain.py</li>\n<li>input L1b file selection (single file, multiple files or dynamic algorithm selection)</li>\n<li>dynamic algorithm loading from YML list(s)\n<ul>\n<li>algorithms are classes of type Algorithm with configurable .init(), .process(), .finalize() \nfunctions.</li>\n<li>Algorithm.init() is called before any L1b file processing.</li>\n<li>Algorithm.process() is called on every L1b file,</li>\n<li>Algorithm.finalize() is called after all files have been processed.</li>\n<li>Each algorithm has access to: L1b Dataset, shared working dict, config dict.</li>\n<li>The 'shared_dict' is used to pass algorithm outputs between algorithms in the chain.</li>\n</ul></li>\n<li>logging with standard warning, info, debug, error levels (+ multi-processing logging support)</li>\n<li>optional multi-processing built in, configurable maximum number of processes used.</li>\n<li>optional use of shared memory (for example for large DEMs and Masks) when using multi-processing. \nThis is an optional experimental feature that must be used with great care as it can result in\nmemory leaks (requiring a server reboot to free) if shared memory is not correctly closed.</li>\n<li>algorithm timing (with MP support)</li>\n<li>chain timing</li>\n</ul>\n\n<h2 id=\"processing-chains-already-implemented-in-framework\">Processing chains already implemented in framework:</h2>\n\n<ul>\n<li>CryoTEMPO Land Ice : view the algorithms: <code>clev2er.algorithms.cryotempo</code></li>\n</ul>\n\n<h2 id=\"installation-of-the-framework\">Installation of the Framework</h2>\n\n<p>Note that the framework installation has been tested on Linux and MacOS systems. Use on\nother operating systems is possible but may require additional install steps, and is not \ndirectly supported.</p>\n\n<p>Make sure you have <em>git</em> installed on your target system.  </p>\n\n<p>Clone the git public repository in to a suitable directory on your system.\nThis will create a directory called <strong>/clev2er</strong> in your current directory.</p>\n\n<p>with https: <br />\n<code>git clone https://github.com/cpomsoft/clev2er.git</code>  </p>\n\n<p>or with ssh: <br />\n<code>git clone git@github.com:cpomsoft/clev2er.git</code>  </p>\n\n<p>or with the GitHub CLI: <br />\n<code>gh repo clone cpomsoft/clev2er</code>  </p>\n\n<h2 id=\"shell-environment-setup\">Shell Environment Setup</h2>\n\n<p>The following shell environment variables need to be set to support framework\noperations. </p>\n\n<p>In a bash shell this might be done by adding export lines to your $HOME/.bashrc file.  </p>\n\n<ul>\n<li>Set the <em>CLEV2ER_BASE_DIR</em> environment variable to the root of the clev2er package.  </li>\n<li>Add $CLEV2ER_BASE_DIR/src to <em>PYTHONPATH</em>.   </li>\n<li>Add ${CLEV2ER_BASE_DIR}/src/clev2er/tools to the <em>PATH</em>.   </li>\n<li>Set the shell's <em>ulimit -n</em> to allow enough file descriptors to be available for\nmulti-processing.</li>\n</ul>\n\n<p>An example environment setup is shown below (the path in the first line should be\nadapted for your specific directory path):</p>\n\n<pre><code>export CLEV2ER_BASE_DIR=/Users/someuser/software/clev2er\nexport PYTHONPATH=$PYTHONPATH:$CLEV2ER_BASE_DIR/src\nexport PATH=${CLEV2ER_BASE_DIR}/src/clev2er/tools:${PATH}\n# for multi-processing/shared mem support set ulimit\n# to make sure you have enough file descriptors available\nulimit -n 8192\n</code></pre>\n\n<h3 id=\"environment-setup-for-specific-chains\">Environment Setup for Specific Chains</h3>\n\n<p>Additional environment setup maybe required for specific chains. This is not \nnecessary unless you intend to use these chains.</p>\n\n<h4 id=\"cryotempo-land-ice\">cryotempo (land ice)</h4>\n\n<pre><code># Environment for CLEV2ER:cryotempo chain\nexport CPDATA_DIR=/cpdata\nexport CPOM_SOFTWARE_DIR=/cpnet/software/cpom_software\nexport FES2014B_BASE_DIR=/cpnet/mssldba_raid6/cpdata/SATS/RA/CRY/L1B/FES2014\nexport CATS2008A_BASE_DIR=/cpnet/mssldba_raid6/cpdata/SATS/RA/CRY/L2I/SIN/CATS_tides\nexport CS2_SLOPE_MODELS_DIR=/cpnet/mssldba_raid6/cpdata/RESOURCES/slope_models\nexport CS2_UNCERTAINTY_BASE_DIR=/cpnet/mssldba_raid6/cryo-tempo/land_ice/uncertainty\nexport CT_LOG_DIR=/tmp\n</code></pre>\n\n<h2 id=\"python-requirement\">Python Requirement</h2>\n\n<p>python v3.10 must be installed or available before proceeding.\nA recommended minimal method of installation of python 3.10 is using miniconda as \nfollows (other appropriate methods may also be used):</p>\n\n<p>For miniconda installation, select the <strong>python 3.10</strong> installer for your operating \nsystem from:</p>\n\n<p><a href=\"https://docs.conda.io/en/latest/miniconda.html\">https://docs.conda.io/en/latest/miniconda.html</a></p>\n\n<p>For example, for Linux, download the installer and install \na minimal python 3.10 installation using:</p>\n\n<pre><code>wget https://repo.anaconda.com/miniconda/Miniconda3-py310_23.5.2-0-Linux-x86_64.sh\nchmod +x Miniconda3-py310_23.5.2-0-Linux-x86_64.sh\n./Miniconda3-py310_23.5.2-0-Linux-x86_64.sh\n\nDo you wish the installer to initialize Miniconda3\nby running conda init? [yes|no] yes\n</code></pre>\n\n<p>You may need to start a new shell to refresh your environment before\nchecking that python 3.10 is in your path.</p>\n\n<p>Check that python v3.10 is now available, by typing:</p>\n\n<pre><code>python -V\n</code></pre>\n\n<h2 id=\"virtual-environment-and-package-requirements\">Virtual Environment and Package Requirements</h2>\n\n<p>This project uses <em>poetry</em> (a dependency manager, see: <a href=\"https://python-poetry.org/\">https://python-poetry.org/</a>) to manage \npackage dependencies and virtual envs.</p>\n\n<p>First, you need to install <em>poetry</em> on your system using instructions from\n<a href=\"https://python-poetry.org/docs/#installation\">https://python-poetry.org/docs/#installation</a>. Normally this just requires running:</p>\n\n<p><code>curl -sSL https://install.python-poetry.org | python3 -</code></p>\n\n<p>You should also then ensure that poetry is in your path, such that the command</p>\n\n<p><code>poetry --version</code></p>\n\n<p>returns the poetry version number. You may need to modify your \nPATH variable in order to achieve this.</p>\n\n<h3 id=\"install-required-python-packages-using-poetry\">Install Required Python packages using Poetry</h3>\n\n<p>Run the following command to install python dependencies for this package\n(for info, it uses settings in pyproject.toml to know what to install)</p>\n\n<pre><code>cd $CLEV2ER_BASE_DIR\npoetry install\n</code></pre>\n\n<h3 id=\"load-the-virtual-environment\">Load the Virtual Environment</h3>\n\n<p>Now you are all setup to go. Whenever you want to run any CLEV2ER chains you \nmust first load the virtual environment using the <code>poetry shell</code> command.</p>\n\n<pre><code>cd $CLEV2ER_BASE_DIR\npoetry shell\n</code></pre>\n\n<p>Note that if you have the wrong version of python (not v3.10) in your path you will see\nerrors. You can tell poetry which version of python to use in this case using:</p>\n\n<pre><code>poetry env use $(which python3.10)\npoetry shell\n</code></pre>\n\n<p>You should now be setup to run processing chains, etc.</p>\n\n<h2 id=\"developer-requirements\">Developer Requirements</h2>\n\n<p>This section details additional installation requirements for developers who will develop/adapt \nnew chains or algorithms.</p>\n\n<h3 id=\"install-pre-commit-hooks\">Install pre-commit hooks</h3>\n\n<p>pre-commit hooks are static code analysis scripts which are run (and must be passed) before\neach git commit. For this project they include pylint, flake8, mypy, black, isort, pdocs.</p>\n\n<p>To install pre-commit hooks, do the following: (note that the second line is not necessary if \nyou have already loaded the virtual environment using <code>poetry shell</code>)</p>\n\n<pre><code>cd $CLEV2ER_BASE_DIR\npoetry shell\npre-commit install\npre-commit run --all-files\n</code></pre>\n\n<p>Now, whenever you make changes to your code, it is recommended to run the following\nin your current code directory.  </p>\n\n<p><code>pre-commit run --all-files</code></p>\n\n<p>This will check that your code passes all static code\ntests prior to running git commit. Note that these same tests are also run when\nyou do a new commit, ie using <code>git commit -a -m \"commit message\"</code>. If the tests fail\nyou must correct the errors before proceeding, and then rerun the pre-commit and/or git commit.</p>\n\n<h2 id=\"run-a-simple-chain-test-example\">Run a simple chain test example</h2>\n\n<p>The following command will run a simple example test chain which dynamically loads\n2 template algorithms and runs them on a set of CryoSat L1b files in a test data directory. \nThe algorithms do not perform any actual processing as they are just template examples.\nMake sure you have the virtual environment already loaded using <code>poetry shell</code> before\nrunning this command.</p>\n\n<p><code>run_chain.py -n testchain -d $CLEV2ER_BASE_DIR/testdata/cs2/l1bfiles</code></p>\n\n<p>There should be no errors.</p>\n\n<p>Note that the algorithms that are dynamically run are located in \n$CLEV2ER_BASE_DIR/src/clev2er/algorithms/testchain/testalg1.py, testalg2.py</p>\n\n<p>The list of algorithms (and their order) for <em>testchain</em> are defined in \n$CLEV2ER_BASE_DIR/config/algorithm_lists/testchain.yml</p>\n\n<p>Algorithm configuration settings are defined in\n$CLEV2ER_BASE_DIR/config/main_config.yml and\n$CLEV2ER_BASE_DIR/config/chain_configs/testchain.yml</p>\n\n<p>To find all the command line options for <em>run_chain.py</em>, type:</p>\n\n<p><code>python run_chain.py -h</code></p>\n\n<p>For further info, please see <code>clev2er.tools</code></p>\n\n<h2 id=\"chain-configuration\">Chain Configuration</h2>\n\n<p>A number of different YML format configuration files are passed to\nthe chain's algorithms, via a merged python dictionary.</p>\n\n<h3 id=\"main-configuration\">Main Configuration</h3>\n\n<p>The default chain configuration file is <code>$CLEV2ER_BASE_DIR/config/main_config.yml</code></p>\n\n<p>This contains settings for :</p>\n\n<ul>\n<li>default chain run control settings</li>\n<li>default multi-processing settings (mp enabled/disabled, max number of cores)</li>\n</ul>\n\n<h3 id=\"chain-specific-configuration\">Chain Specific Configuration</h3>\n\n<p>The default chain specific configuration file is\n<code>$CLEV2ER_BASE_DIR/config/chain_configs/&lt;chain_name&gt;_&lt;BVVV&gt;.yml</code></p>\n\n<h2 id=\"developing-new-chains\">Developing New Chains</h2>\n\n<ol>\n<li>Decide on a chain name. For example <strong>newchain</strong></li>\n<li>Create $CLEV2ER_BASE_DIR/algorithms/<strong>newchain</strong>/ directory to store the new chain's algorithms.</li>\n<li>Create $CLEV2ER_BASE_DIR/algorithms/<strong>newchain</strong>/tests to store the new chain's \nalgorithm unit tests (using tests formatted for pytest). At least one algorithm test file \nshould be created per algorithm, which should contain suitable test functions.</li>\n<li>Create your algorithms by copying and renaming the algorithm class template \n$CLEV2ER_BASE_DIR/algorithms/testchain/testalg1.py in to your algorithm directory. Each algorithm\nshould have a different file name of your choice. For example: alg_retrack.py, alg_geolocate.py. \nYou need to fill in the appropriate sections of the init(), process() and finalize() functions \nfor each algorithm (see section below for more details on using algorithm classes).</li>\n<li>Each algorithm and their unit tests must pass the static code checks (pylint, mypy, etc) which \nare automatically run as git pre-commit hooks. </li>\n<li>Create a YML configuration file for the chain in \n$CLEV2ER_BASE_DIR/config/chain_configs/<strong>newchain</strong>.yml. The configuration file contains\nany settings or resource locations that are required by your algorithms, and may include \nenvironment variables.\nNote that you can also create a configuration file per baseline and version of your chain by \nappending <code>_&lt;BVVV&gt;</code>. So for baseline A, version 1, you would use:\n$CLEV2ER_BASE_DIR/config/chain_configs/<strong>newchain</strong>_A001.yml</li>\n<li>If required create one or more finder class files. These allow fine control of L1b file \nselection from the command line (see section below for more details).</li>\n<li>Create an algorithm list YML file in \n$CLEV2ER_BASE_DIR/config/algorithm_lists/<strong>newchain</strong>.yml. \nIf you want to have multiple baselines and versions of your chain you can create one or \nmore algorithm lists using the syntax: \n$CLEV2ER_BASE_DIR/config/algorithm_lists/<strong>newchain</strong>_A001.yml (where A is the baseline \ncharacter A-Z, and 001 is the version number).</li>\n<li>To test your chain on a single L1b file, you can use \n<code>run_chain.py --name newchain -f /path/to/a/l1b_file</code>. There are many options for running chains \n(see <code>run_chain.py -h</code>).</li>\n</ol>\n\n<h2 id=\"developer-notes\">Developer Notes</h2>\n\n<h3 id=\"automatic-documentation\">Automatic Documentation</h3>\n\n<p>This user manual is hosted on GitHub pages (<a href=\"https://cpomsoft.github.io/clev2er\">https://cpomsoft.github.io/clev2er</a>)</p>\n\n<p>Content is created from doctrings\n(optionally containing Markdown: <a href=\"https://www.markdownguide.org/basic-syntax/#code\">https://www.markdownguide.org/basic-syntax/#code</a> )\nin the code,\nusing the <em>pdoc</em> package : <a href=\"https://pdoc.dev\">https://pdoc.dev</a></p>\n\n<p>Diagrams are implemented using mermaid: <a href=\"https://mermaid.js.org\">https://mermaid.js.org</a></p>\n\n<p>The site is locally built in <code>$CLEV2ER_BASE_DIR/docs</code>, using a pre-commit hook\n(hook id: pdocs_build).\nHooks are configured in <code>$CLEV2ER_BASE_DIR/.pre-commit-config.yaml</code></p>\n\n<p>The hook calls the script <code>$CLEV2ER_BASE_DIR/pdocs_build.sh</code> to build the site\nwhenever a <code>git commit</code> is run.</p>\n\n<p>When a <code>git push</code> is run, GitHub automatically extracts the site from the\ndocs directory and publishes it.</p>\n\n<p>The front page of the site (ie this page) is located in the doctring within\n<code>$CLEV2ER_BASE_DIR/src/clev2er/__init__.py</code>.</p>\n\n<p>The docstring within <code>__init__.py</code> of each package directory should provide\nmarkdown to describe the directories beneath it.</p>\n"}, {"fullname": "clev2er.algorithms", "modulename": "clev2er.algorithms", "kind": "module", "doc": "<h2 id=\"algorithm-directories\">Algorithm Directories</h2>\n\n<p>The clev2er -> <strong>algorithms</strong> contains sub-directories for each chain.  </p>\n\n<p>For example:  <code>clev2er.algorithms.cryotempo</code></p>\n\n<p>in this case <strong>cryotempo</strong> is the chain name, and the <em>cryotempo</em> directory contains\nalgorithms for its chain.</p>\n\n<h2 id=\"templates-directory\">Templates directory</h2>\n\n<p>The <code>clev2er.algorithms.templates</code> directory contains a template algorithm to be copied for\nnew chain algorithms.</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo", "modulename": "clev2er.algorithms.cryotempo", "kind": "module", "doc": "<h1 id=\"algorithms-for-the-cryotempo-land-ice-chain\">Algorithms for the cryotempo land ice chain</h1>\n\n<p>Contains  algorithms for the ESA CryoTEMPO Project's land ice\ntheme. Algorithms are usually implemented in the order shown in the diagram below\n(although the actual order is specified in the algorithm list \nused i.e. <code>$CLEV2ER_BASE_DIR/config/algorithm_lists/cryotempo.yml</code>).</p>\n\n<p>Click on the algorithm names in the Submodules section to the left to view further\ndetails on each Algorithm.</p>\n\n<pre class=\"mermaid-pre\"><div class=\"mermaid\">graph LR;\n    AA(L1b)--&gt;A\n    A[alg_identify_file]--&gt;B[alg_skip_on_mode]\n    B--&gt;C[alg_skip_on_area_bounds]\n    C--&gt;D[alg_surface_type]\n    D--&gt;E[alg_dilated_coastal_mask]\n</div></pre>\n\n<pre class=\"mermaid-pre\"><div class=\"mermaid\">graph LR;\n    E[alg_cats2008a_tide_correction]--&gt;F[alg_fes2014b_tide_correction]\n    F--&gt;G[alg_geo_corrections]\n    G--&gt;H[alg_waveform_quality]\n</div></pre>\n\n<pre class=\"mermaid-pre\"><div class=\"mermaid\">graph LR;\n    I[alg_retrack]--&gt;J[alg_backscatter]\n    J--&gt;K[alg_geolocate_lrm]\n    K--&gt;L[alg_geolocate_sin]\n    L--&gt;M[alg_basin_ids]\n</div></pre>\n\n<pre class=\"mermaid-pre\"><div class=\"mermaid\">graph LR;\n    M[alg_ref_dems]--&gt;N[alg_filter_height]\n    N--&gt;O[alg_uncertainty]\n    O--&gt;P[alg_product_output]\n</div></pre>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_backscatter", "modulename": "clev2er.algorithms.cryotempo.alg_backscatter", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_backscatter</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_backscatter.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_backscatter", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to Calculate Backscatter from CS2 L1b dataset</strong>.</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><strong>Contribution to shared_dict</strong>\n    - shared_dict[\"sig0_20_ku\"] (np.ndarray) : array of backscatter values\n<strong>Required from other algorithms</strong>\n-   shared_dict[\"pwr_at_rtrk_point\"]\n-   shared_dict[\"range_cor_20_ku\"]</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_backscatter.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_backscatter", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_backscatter.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_backscatter", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>CLEV2ER Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n\n<p>This is required to support logging during multi-processing</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_basin_ids", "modulename": "clev2er.algorithms.cryotempo.alg_basin_ids", "kind": "module", "doc": "<p>clev2er.algorithms.templates.alg_basin_ids</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_basin_ids.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_basin_ids", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to do find ice sheet basin id for each location along track</strong></p>\n\n<p>BaseAlgorithm: __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><em>* Contribution to Shared Dictionary *</em></p>\n\n<pre><code>- shared_dict[\"basin_mask_values_rignot\"] : (np.ndarray), basin mask values from Rignot\n- shared_dict[\"basin_mask_values_zwally\"] : (np.ndarray), basin mask values from Zwally\n</code></pre>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_basin_ids.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_basin_ids", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_basin_ids.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_basin_ids", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>CLEV2ER Algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_basin_ids.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_basin_ids", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final clean up actions for algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  Can be set to track at what stage the</li>\n<li>finalize() function was called</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "modulename": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to load the corresponding CATS2008a tide correction file\nand extract the tide corrections.</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><strong>Requires from shared dictionary</strong>:</p>\n\n<ul>\n<li><code>shared_dict[\"l1b_file_name\"]</code> : str</li>\n<li><code>shared_dict[\"hemisphere\"]</code> : str</li>\n<li><code>shared_dict[\"instr_mode\"]</code> : str</li>\n<li><code>shared_dict[\"num_20hz_records\"]</code> : int</li>\n</ul>\n\n<p><strong>Outputs to shared dictionary</strong>:</p>\n\n<ul>\n<li><code>shared_dict[\"cats_tide\"]</code> : np.ndarray</li>\n<li><code>shared_dict[\"cats_tide_required\"]</code> : bool, True if CATS tide has been calculated</li>\n</ul>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_cats2008a_tide_correction", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "modulename": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_dilated_coastal_mask</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to\nForm a mask array of points to include from a 10km dilated Ant or Grn coastal mask.\nDilated coastal masks come from the Mask class :\nMask('antarctica_iceandland_dilated_10km_grid_mask')\nMask('greenland_iceandland_dilated_10km_grid_mask')</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<h1 id=\"contributions-to-shared_dict\">Contributions to shared_dict:</h1>\n\n<pre><code>shared_dict[\"dilated_surface_mask\"] : (ndarray) of bool, True is inside dilated mask\n</code></pre>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<p>Interpolate surface type data from Bedmachine for nadir locations of L1b\nTranspose surface type values from Bedmachine grid to CryoTEMPO values:\n0=ocean, 1=grounded_ice, 2=floating_ice, 3=ice_free_land,4=non-Greenland land</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_dilated_coastal_mask", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final clean up actions for algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  Can be set to track at what stage the</li>\n<li>finalize() function was called</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dump", "modulename": "clev2er.algorithms.cryotempo.alg_dump", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_dump</p>\n\n<p>print the shared_dict</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dump.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_dump", "qualname": "Algorithm", "kind": "class", "doc": "<p><em>* Algorithm to print shared_dict to stdout *</em></p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dump.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_dump", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_dump.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_dump", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "modulename": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to get FES2014b tide correction for locations in l1b file</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><em>*Contribution to Shared Dict *</em>\n    - shared_dict[\"fes2014b_corrections\"][\"ocean_tide_20\"] : np.ndarray\n    - shared_dict[\"fes2014b_corrections\"][\"ocean_tide_eq_20\"] : np.ndarray\n    - shared_dict[\"fes2014b_corrections\"][\"load_tide_20\"] : np.ndarray</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_fes2014b_tide_correction", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_filter_height", "modulename": "clev2er.algorithms.cryotempo.alg_filter_height", "kind": "module", "doc": "<p>clev2er.algorithms.templates.alg_filter_height</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_filter_height.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_filter_height", "qualname": "Algorithm", "kind": "class", "doc": "<p>filter on maximum diff to ref dem</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_filter_height.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_filter_height", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_filter_height.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_filter_height", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geo_corrections", "modulename": "clev2er.algorithms.cryotempo.alg_geo_corrections", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_geo_corrections</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geo_corrections.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_geo_corrections", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to calculate geophysical corrections for a CS2 l1b file</strong></p>\n\n<p>1b) Calculate sum of geo-corrections\nFloating ice/ocean: DRY + WET + DAC + GIM + OT + LPEOT + OLT + SET + GPT\nLand ice:           DRY + WET +       GIM +              OLT + SET + GPT</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><em>*Contribution to Shared Dict *</em></p>\n\n<pre><code>- shared_dict[\"sum_cor_20_ku\"] : sum of geo -corrections\n</code></pre>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geo_corrections.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_geo_corrections", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geo_corrections.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_geo_corrections", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lepta", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lepta", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_geolocate_lepta</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lepta.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lepta", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to perform LRM geolocation using an adpated Roemer/LEPTA method</strong>.</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>Relocation using 100m or 200m DEMS, using</p>\n\n<p>antarctic_dem: rema_ant_200m\ngreenland_dem: arcticdem_100m_greenland</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><strong>Contribution to shared dictionary</strong></p>\n\n<pre><code>- shared_dict[\"lat_poca_20_ku\"] : np.ndarray (POCA latitudes)\n- shared_dict[\"lon_poca_20_ku\"] : np.ndarray (POCA longitudes)\n- shared_dict[\"height_20_ku\"]   : np.ndarray (elevations)\n- shared_dict[\"latitudes\"]   : np.ndarray (final latitudes == POCA or nadir if failed)\n- shared_dict[\"longitudes\"]   : np.ndarray (final lons == POCA or nadir if failed)\n</code></pre>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lepta.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lepta", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lepta.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lepta", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lepta.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lepta", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final clean up actions for algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  Can be set to track at what stage the</li>\n<li>finalize() function was called</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lrm", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lrm", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_geolocate_lrm</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lrm.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lrm", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to geolocate measurements to the POCA (point of closest approach) for LRM</strong></p>\n\n<p>Also to calculate height_20_ku</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><em>* Contribution to Shared Dictionary *</em></p>\n\n<pre><code>- shared_dict[\"lat_poca_20_ku\"] : np.ndarray (POCA latitudes)\n- shared_dict[\"lon_poca_20_ku\"] : np.ndarray (POCA longitudes)\n- shared_dict[\"height_20_ku\"]   : np.ndarray (elevations)\n- shared_dict[\"latitudes\"]   : np.ndarray (final latitudes == POCA or nadir if failed)\n- shared_dict[\"longitudes\"]   : np.ndarray (final lons == POCA or nadir if failed)\n</code></pre>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lrm.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lrm", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_lrm.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_lrm", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_sin", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_sin", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_geolocate_sin</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_sin.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_sin", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to geolocate measurements to the POCA (point of closest approach) for SIN</strong></p>\n\n<p>Also to calculate height_20_ku</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><em>* Contribution to Shared Dictionary *</em></p>\n\n<pre><code>- shared_dict[\"lat_poca_20_ku\"] : np.ndarray (POCA latitudes)\n- shared_dict[\"lon_poca_20_ku\"] : np.ndarray (POCA longitudes)\n- shared_dict[\"height_20_ku\"]   : np.ndarray (elevations)\n- shared_dict[\"latitudes\"]   : np.ndarray (final latitudes == POCA or nadir if failed)\n- shared_dict[\"longitudes\"]   : np.ndarray (final lons == POCA or nadir if failed)\n</code></pre>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_sin.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_sin", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_sin.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_sin", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_geolocate_sin.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_geolocate_sin", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final clean up actions for algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  Can be set to track at what stage the</li>\n<li>finalize() function was called</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_identify_file", "modulename": "clev2er.algorithms.cryotempo.alg_identify_file", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_template</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_identify_file.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_identify_file", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to <strong>identify L1b file</strong>,</p>\n\n<ol>\n<li>find the instrument mode</li>\n<li>find the number of records</li>\n</ol>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)\n<strong>Contribution to shared dictionary</strong></p>\n\n<ul>\n<li>shared_dict[\"instr_mode\"]</li>\n<li>shared_dict[\"num_20hz_records\"]</li>\n</ul>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_identify_file.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_identify_file", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_identify_file.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_identify_file", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_product_output", "modulename": "clev2er.algorithms.cryotempo.alg_product_output", "kind": "module", "doc": "<p>clev2er.algorithms.templates.alg_template</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_product_output.cnes_cycle_to_subcycle", "modulename": "clev2er.algorithms.cryotempo.alg_product_output", "qualname": "cnes_cycle_to_subcycle", "kind": "function", "doc": "<p>Calculate the CNES CS2 sub-cycle and track number number</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cycle_number (int):</strong>  ESA CS2 cycle number from L1b</li>\n<li><strong>rel_orbit_number (int):</strong>  CS2 relative orbit within ESA cycle</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[int,int]: sub cycle number, track number</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cycle_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">rel_orbit_number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_product_output.get_current_commit_hash", "modulename": "clev2er.algorithms.cryotempo.alg_product_output", "qualname": "get_current_commit_hash", "kind": "function", "doc": "<p>retrieve the current git commit version\n   or None if not available</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>log (logging.Logger) :</strong>  current log instance to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: git commit hash, or '' if failed</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_product_output.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_product_output", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to write L2 CryoTEMPO output files</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p><strong>Contribution to shared dictionary</strong></p>\n\n<p>shared_dict['product_filename']: (str), path of L2 Cryo-Tempo product file created</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_product_output.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_product_output", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_product_output.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_product_output", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_ref_dem", "modulename": "clev2er.algorithms.cryotempo.alg_ref_dem", "kind": "module", "doc": "<p>clev2er.algorithms.templates.alg_ref_dem</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_ref_dem.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_ref_dem", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to find reference DEM elevation values for each track location</strong></p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<pre><code>**Contribution to shared dictionary**\n\n- shared_dict['dem_elevation_values'] : (ndarray), reference DEM elevation values (m) for\n                                                   each track location\n</code></pre>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_ref_dem.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_ref_dem", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_ref_dem.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_ref_dem", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_ref_dem.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_ref_dem", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final clean up actions for algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  Can be set to track at what stage the</li>\n<li>finalize() function was called</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_retrack", "modulename": "clev2er.algorithms.cryotempo.alg_retrack", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_retrack</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_retrack.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_retrack", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to retrack CS2 waveforms</strong></p>\n\n<p><strong>For SARin</strong> waveforms:\n<code>clev2er.utils.cs2.retrackers.cs2_sin_max_coherence_retracker</code> called<br>\n<strong>For LRM</strong> waveforms: <code>cs2_tcog_retracker()</code> called</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n\n<p>Tuning thresholds are set in config.</p>\n\n<p><strong>Contribution to shared dictionary</strong></p>\n\n<ul>\n<li>shared_dict[\"ind_wfm_retrack_20_ku\"]: (np.ndarray) closest bin number to retracking point(s)</li>\n<li>shared_dict[\"pwr_at_rtrk_point\"] : (np.ndarray) waveform power at the retracking point</li>\n<li>shared_dict[\"range_cor_20_ku\"] : (np.ndarray) corrected range (retracked and geo-corrected)</li>\n<li>shared_dict[\"num_retracker_failures\"] (int) : number of retracker failures</li>\n<li>shared_dict[\"percent_retracker_failure\"]  (float) : percentage of retracker failures</li>\n<li>shared_dict[\"geo_corrected_tracker_range\"] : (np.ndarray) geocorrected tracker range</li>\n<li>shared_dict[\"retracker_correction\"] : (np.ndarray) retracker correction</li>\n<li>shared_dict[\"leading_edge_start\"] : (np.ndarray) positions of leading edge start</li>\n<li>shared_dict[\"leading_edge_stop\"] : (np.ndarray) positions of leading edge stop</li>\n</ul>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_retrack.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_retrack", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_retrack.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_retrack", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_skip_on_area_bounds</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "qualname": "Algorithm", "kind": "class", "doc": "<p>Algorithm to do a fast check on whether the l1b file\n   is within area bounds of Antarctica and Greenland.\nDepending on the mode (LRM, SIN) we can reject files that are in\ncertain lat or lon ranges, as we know they do not pass over\nGreenland or Antarctica</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)\n<strong>Contribution to shared dictionary</strong></p>\n\n<ul>\n<li>shared_dict[\"lats_nadir\"]</li>\n<li>shared_dict[\"lons_nadir\"]</li>\n<li>shared_dict[\"hemisphere\"]</li>\n</ul>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_area_bounds", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_mode", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_mode", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_skip_on_mode</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_mode.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_mode", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to find the instrument mode in a CS2 L1b file</strong></p>\n\n<p>if mode is LRM or SIN, shared_dict['instr_mode] is set to 'LRM' or 'SIN'</p>\n\n<p>if mode is SAR, return (False,\"SKIP_OK...\")</p>\n\n<p><strong>Contribution to shared dictionary</strong></p>\n\n<p>None</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_mode.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_mode", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_skip_on_mode.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_skip_on_mode", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_surface_type", "modulename": "clev2er.algorithms.cryotempo.alg_surface_type", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_surface_type</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_surface_type.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_surface_type", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to find the surface type from Bedmachine v2 (ANT)/v3 (GRN)</strong></p>\n\n<p>Contributions to shared_dict:\n    shared_dict[\"ocean_locations\"] : (ndarray), ocean locations\n    shared_dict[\"grounded_ice_locations\"]  : (ndarray), grounded ice locations\n    shared_dict[\"floating_ice_locations\"]  : (ndarray), floating ice locations\n    shared_dict[\"icefree_land_locations\"]  : (ndarray), ice free land locations\n    shared_dict[\"non_grn_land_locations\"]  : (ndarray), locations of land locs not in Greenland\n    shared_dict[\"cryotempo_surface_type\"]  : (ndarray), values of surface type as specified\n                                             CT (0..4), as shown below</p>\n\n<p>corresponding to L1b records\n Uses:</p>\n\n<ul>\n<li>Bedmachine v2 for Antarctica : <a href=\"https://nsidc.org/data/nsidc-0756/versions/2\">https://nsidc.org/data/nsidc-0756/versions/2</a></li>\n<li>Bedmachine v3 for Greenland : <a href=\"https://nsidc.org/data/idbmg4\">https://nsidc.org/data/idbmg4</a></li>\n</ul>\n\n<p>Antarctica mask values: 0,1,2,3,4 = ocean ice_free_land grounded_ice\n                                    floating_ice lake_vostok\nGreenland mask values: 0,1,2,3,4 = ocean ice_free_land grounded_ice floating_ice\n                                    non-Greenland land</p>\n\n<p>Remap to Cryo-TEMPO surface type values (from ATBD):</p>\n\n<h6 id=\"antarctica\">Antarctica:</h6>\n\n<blockquote>\n  <p>CT --  surface (source value)\n          0  --  ocean (0)\n          1  --  grounded ice (2 (grounded Ice) and 4 (Lake Vostok))\n          2  --  floating ice (3)\n          3  --  ice free land (1)</p>\n  \n  <p>Greenland:\n    CT --  surface (source value)\n          0  --  ocean (0)\n          1  --  grounded ice (2)\n          2  --  floating ice (3)\n          3  --  ice free land (1)\n          4  --  non-Greenland land (4)</p>\n</blockquote>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_surface_type.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_surface_type", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_surface_type.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_surface_type", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_surface_type.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_surface_type", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final clean up actions for algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  Can be set to track at what stage the</li>\n<li>finalize() function was called</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_template", "modulename": "clev2er.algorithms.cryotempo.alg_template", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_template</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_template.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_template", "qualname": "Algorithm", "kind": "class", "doc": "<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_template.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_template", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_template.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_template", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_template.Algorithm.finalize", "modulename": "clev2er.algorithms.cryotempo.alg_template", "qualname": "Algorithm.finalize", "kind": "function", "doc": "<p>Perform final clean up actions for algorithm</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stage (int, optional):</strong>  Can be set to track at what stage the</li>\n<li>finalize() function was called</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stage</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_uncertainty", "modulename": "clev2er.algorithms.cryotempo.alg_uncertainty", "kind": "module", "doc": "<p>clev2er.algorithms.templates.alg_uncertainty</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_uncertainty.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_uncertainty", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to retrieve elevation uncertainty from (CS2-IS2) derived uncertainty table and\nsurface slope at each measurement</strong></p>\n\n<p><strong>Contribution to shared_dict</strong>\n    -shared_dict[\"uncertainty\"] : (np.ndarray) uncertainty at each track location</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_uncertainty.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_uncertainty", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_uncertainty.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_uncertainty", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_waveform_quality", "modulename": "clev2er.algorithms.cryotempo.alg_waveform_quality", "kind": "module", "doc": "<p>clev2er.algorithms.cryotempo.alg_waveform_quality</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.alg_waveform_quality.Algorithm", "modulename": "clev2er.algorithms.cryotempo.alg_waveform_quality", "qualname": "Algorithm", "kind": "class", "doc": "<p><strong>Algorithm to perform waveform quality checks</strong>.</p>\n\n<p>Separate checks for SARIN and LRM waveforms</p>\n\n<p>SARIN waveforms : <code>sarin_waveform_qc_checks()</code><br>\n    thresholds :<br>\n    config[\"sin_waveform_quality_tests\"][\"total_power_threshold\"]<br>\n    config[\"sin_waveform_quality_tests\"][\"low_peakiness_threshold\"]<br>\n    config[\"sin_waveform_quality_tests\"][\"low_position_max_power\"]<br>\n    config[\"sin_waveform_quality_tests\"][\"high_position_max_power\"]</p>\n\n<p>LRM waveforms: <code>lrm_waveform_qc_checks()</code><br>\n    config[\"lrm_waveform_quality_tests\"][\"total_power_threshold\"]<br>\n    config[\"lrm_waveform_quality_tests\"][\"low_peakiness_threshold\"]<br>\n    config[\"lrm_waveform_quality_tests\"][\"high_peakiness_threshold\"]<br></p>\n\n<p><strong>Contribution to shared_dict</strong>:<br>\n<code>shared_dict[\"waveforms_to_include\"]</code> : nd.array of size num_records containing bool vals\nindicating to include waveform in future analysis based on waveform quality and being\ninside dilated surface mask</p>\n\n<p>CLEV2ER Algorithm: inherits from BaseAlgorithm</p>\n\n<p>BaseAlgorithm __init__(config,thislog)\n    Args:\n        config: Dict[str, Any]: chain configuration dictionary\n        thislog: logging.Logger | None: initial logger instance to use or\n                                        None (use root logger)</p>\n", "bases": "clev2er.algorithms.base.base_alg.BaseAlgorithm"}, {"fullname": "clev2er.algorithms.cryotempo.alg_waveform_quality.Algorithm.init", "modulename": "clev2er.algorithms.cryotempo.alg_waveform_quality", "qualname": "Algorithm.init", "kind": "function", "doc": "<p>Algorithm initialization</p>\n\n<p>Add steps in this function that are run once at the beginning of the chain\n(for example loading a DEM or Mask)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(bool,str) : success or failure, error string</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError :</strong>  keys not in config</li>\n<li><strong>FileNotFoundError :</strong> </li>\n<li><strong>OSError :</strong> </li>\n</ul>\n\n<p>Note: raise and Exception rather than just returning False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.alg_waveform_quality.Algorithm.process", "modulename": "clev2er.algorithms.cryotempo.alg_waveform_quality", "qualname": "Algorithm.process", "kind": "function", "doc": "<p>Main algorithm processing function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b (Dataset):</strong>  input l1b file dataset (constant)</li>\n<li><strong>shared_dict (dict):</strong>  shared_dict data passed between algorithms</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple : (success (bool), failure_reason (str))\n  ie\n  (False,'error string'), or (True,'')</p>\n</blockquote>\n\n<p><strong>IMPORTANT NOTE:</strong> when logging within the Algorithm.process() function you must use\nthe self.log.info(),error(),debug() logger and NOT log.info(), log.error(), log.debug :</p>\n\n<p><code>self.log.error(\"your message\")</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">l1b</span><span class=\"p\">:</span> <span class=\"n\">netCDF4</span><span class=\"o\">.</span><span class=\"n\">_netCDF4</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">shared_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.find_lrm", "modulename": "clev2er.algorithms.cryotempo.find_lrm", "kind": "module", "doc": "<p>find_lrm module</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.find_lrm.FileFinder", "modulename": "clev2er.algorithms.cryotempo.find_lrm", "qualname": "FileFinder", "kind": "class", "doc": "<p>Class to find a list of LRM L1b files to process in one or more\n   specified months, from</p>\n\n<p><base_path>/LRM/<YYYY>/<MM>/CS_<em>SIR_</em>.nc</p>\n\n<h1 id=\"usage-if-using-the-default-base_path-raid6cpdatasatsracryl1b\">Usage if using the default base_path: /raid6/cpdata/SATS/RA/CRY/L1B</h1>\n\n<p>finder=FileFinder()\nfinder.add_month(1)\nfinder.add_month(2)\nfinder.add_year(2020)\nfiles=finder.find_files()</p>\n\n<h2 id=\"options\">Options</h2>\n\n<p>finder.set_base_path(path)</p>\n\n<p>Raises: FileNotFoundError : if base_path is not a valid directory</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.find_lrm.FileFinder.__init__", "modulename": "clev2er.algorithms.cryotempo.find_lrm", "qualname": "FileFinder.__init__", "kind": "function", "doc": "<p>class initialization function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "clev2er.algorithms.cryotempo.find_lrm.FileFinder.set_option", "modulename": "clev2er.algorithms.cryotempo.find_lrm", "qualname": "FileFinder.set_option", "kind": "function", "doc": "<p>set options</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>option_str (str):</strong>  an option str w</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">option_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.find_lrm.FileFinder.add_month", "modulename": "clev2er.algorithms.cryotempo.find_lrm", "qualname": "FileFinder.add_month", "kind": "function", "doc": "<p>Add to list of month numbers to load</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>month (int):</strong>  month number</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">month</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.find_lrm.FileFinder.add_year", "modulename": "clev2er.algorithms.cryotempo.find_lrm", "qualname": "FileFinder.add_year", "kind": "function", "doc": "<p>Add to list of year numbers to load</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>year (int):</strong>  year number in YYYY</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.find_lrm.FileFinder.set_base_path", "modulename": "clev2er.algorithms.cryotempo.find_lrm", "qualname": "FileFinder.set_base_path", "kind": "function", "doc": "<p>Set base path for search</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  path of base path for search</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.find_lrm.FileFinder.set_baselines", "modulename": "clev2er.algorithms.cryotempo.find_lrm", "qualname": "FileFinder.set_baselines", "kind": "function", "doc": "<p>Set the allowed L1b baselines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>baselines (str):</strong>  string containing one or more baseline chars. ie 'D' or 'DE'</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">baselines</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.find_lrm.FileFinder.find_files", "modulename": "clev2er.algorithms.cryotempo.find_lrm", "qualname": "FileFinder.find_files", "kind": "function", "doc": "<p>Search for L1b file according to pattern</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>flat_search (bool) :</strong>  if True only search in self.base_path, else use pattern</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(str): list of files</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flat_search</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.find_sin", "modulename": "clev2er.algorithms.cryotempo.find_sin", "kind": "module", "doc": "<p>find_sin module</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.find_sin.FileFinder", "modulename": "clev2er.algorithms.cryotempo.find_sin", "qualname": "FileFinder", "kind": "class", "doc": "<p>Class to find a list of SIN L1b files to process in one or more\n   specified months, from</p>\n\n<p><base_path>/SIN/<YYYY>/<MM>/CS_<em>SIR_</em>.nc</p>\n\n<h1 id=\"usage-if-using-the-default-base_path-raid6cpdatasatsracryl1b\">Usage if using the default base_path: /raid6/cpdata/SATS/RA/CRY/L1B</h1>\n\n<p>finder=FileFinder()\nfinder.add_month(1)\nfinder.add_month(2)\nfinder.add_year(2020)\nfiles=finder.find_files()</p>\n\n<h2 id=\"options\">Options</h2>\n\n<p>finder.set_base_path(path)</p>\n\n<p>Raises: FileNotFoundError : if base_path is not a valid directory</p>\n"}, {"fullname": "clev2er.algorithms.cryotempo.find_sin.FileFinder.__init__", "modulename": "clev2er.algorithms.cryotempo.find_sin", "qualname": "FileFinder.__init__", "kind": "function", "doc": "<p>class initialization function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "clev2er.algorithms.cryotempo.find_sin.FileFinder.set_option", "modulename": "clev2er.algorithms.cryotempo.find_sin", "qualname": "FileFinder.set_option", "kind": "function", "doc": "<p>set options</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>option_str (str):</strong>  an option str w</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">option_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.find_sin.FileFinder.add_month", "modulename": "clev2er.algorithms.cryotempo.find_sin", "qualname": "FileFinder.add_month", "kind": "function", "doc": "<p>Add to list of month numbers to load</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>month (int):</strong>  month number</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">month</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.find_sin.FileFinder.add_year", "modulename": "clev2er.algorithms.cryotempo.find_sin", "qualname": "FileFinder.add_year", "kind": "function", "doc": "<p>Add to list of year numbers to load</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>year (int):</strong>  year number in YYYY</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.find_sin.FileFinder.set_base_path", "modulename": "clev2er.algorithms.cryotempo.find_sin", "qualname": "FileFinder.set_base_path", "kind": "function", "doc": "<p>Set base path for search</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  path of base path for search</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.find_sin.FileFinder.set_baselines", "modulename": "clev2er.algorithms.cryotempo.find_sin", "qualname": "FileFinder.set_baselines", "kind": "function", "doc": "<p>Set the allowed L1b baselines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>baselines (str):</strong>  string containing one or more baseline chars. ie 'D' or 'DE'</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">baselines</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.cryotempo.find_sin.FileFinder.find_files", "modulename": "clev2er.algorithms.cryotempo.find_sin", "qualname": "FileFinder.find_files", "kind": "function", "doc": "<p>Search for L1b file according to pattern</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>flat_search (bool) :</strong>  if True only search in self.base_path, else use pattern</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>(str): list of files</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">flat_search</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.algorithms.templates", "modulename": "clev2er.algorithms.templates", "kind": "module", "doc": "<p>This directory contains <em>algorithm template.py</em> which should be the <em>basis</em> for\nall new algorithms in the CLEV2ER project.</p>\n\n<p>The <code>clev2er.algorithms.templates.algorithm_template.Algorithm</code> class contains the \ntemplate algorithm code.</p>\n\n<p>The <code>clev2er.algorithms.templates.algorithm_template.test</code> module contains \nthe unit tests for the algorithm template code.</p>\n"}, {"fullname": "clev2er.tools", "modulename": "clev2er.tools", "kind": "module", "doc": "<h2 id=\"tools-directory\">Tools Directory</h2>\n\n<p>This directory contains command-line tools required to run the chains.</p>\n\n<h3 id=\"tools-list\">Tools List</h3>\n\n<ul>\n<li><code>clev2er.tools.run_chain</code></li>\n</ul>\n\n<h3 id=\"example-of-running-the-chain\">Example of Running the Chain</h3>\n\n<p>This example runs the processing chain <em>cryotempo</em> on every L1b file in \n/path/to/l1b_files. It uses all the default configuration files for that chain.</p>\n\n<pre><code>cd $CLEV2ER_BASE_DIR/src/clev2er/tools\npython run_chain.py --name cryotempo -d /path/to/l1b_files\n</code></pre>\n\n<p>To find all the current command line options for <em>run_chain.py</em>, type:  </p>\n\n<p><code>run_chain.py --help</code></p>\n\n<table>\n<thead>\n<tr>\n  <th>Argument</th>\n  <th>Short Arg</th>\n  <th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>--name</td>\n  <td>-n</td>\n  <td>name (str) : chain name</td>\n</tr>\n<tr>\n  <td>--alglist</td>\n  <td>-a</td>\n  <td>[Optional, str] path of algorithm list YML file. Default is ${CLEV2ER_BASE_DIR}/config/algorithm_lists/<em>chainname</em>.yml</td>\n</tr>\n<tr>\n  <td>--conf</td>\n  <td>-c</td>\n  <td>[Optional, str] path of main YAML configuration file. Default is $CLEV2ER_BASE_DIR/config/main_config.yml</td>\n</tr>\n<tr>\n  <td>--baseline</td>\n  <td>-b</td>\n  <td>[Optional, char] baseline of chain. Single uppercase char. Default=A. Used to specify the chain config file, where config file = $CLEV2ER_BASE_DIR/config/chain_configs/<em>chainname</em>_<em>BVVV</em>.yml</td>\n</tr>\n<tr>\n  <td>--version</td>\n  <td>-v</td>\n  <td>[Optional, char] version of chain. integer 1-100. Default=1. Used to specify the chain config file, where config file = $CLEV2ER_BASE_DIR/config/chain_configs/<em>chainname</em>_<em>BVVV</em>.yml</td>\n</tr>\n<tr>\n  <td>--file</td>\n  <td>-f</td>\n  <td>[Optional, str] path of input L1b file</td>\n</tr>\n<tr>\n  <td>--dir</td>\n  <td>-d</td>\n  <td>[Optional, str] path of dir containing input L1b files</td>\n</tr>\n<tr>\n  <td>--max_files</td>\n  <td>-mf</td>\n  <td>[Optional, int] limit number of L1b files input to first n</td>\n</tr>\n<tr>\n  <td>--quiet</td>\n  <td>-q</td>\n  <td>[Optional] do not output log messages to stdout</td>\n</tr>\n<tr>\n  <td>--debug</td>\n  <td>-de</td>\n  <td>[Optional] log.DEBUG messages are output to log file, and stdout</td>\n</tr>\n<tr>\n  <td>--multiprocessing</td>\n  <td>-mp</td>\n  <td>[Optional] use multi-processing, overrides main config file setting</td>\n</tr>\n<tr>\n  <td>--sequentialprocessing</td>\n  <td>-sp</td>\n  <td>[Optional] use sequential processing, overrides main config file setting</td>\n</tr>\n<tr>\n  <td>--nprocs</td>\n  <td>-np</td>\n  <td>[Optional,int] maximum number of cores to split multi-processing on. Overrides setting in main config</td>\n</tr>\n<tr>\n  <td>--sharedmem</td>\n  <td>-sm</td>\n  <td>[Optional] use shared memory when multi-processing is enabled. Experimental feature</td>\n</tr>\n<tr>\n  <td>--stop_on_error</td>\n  <td>-st</td>\n  <td>[Optional] stop chain on first error. Default is set in main config file</td>\n</tr>\n<tr>\n  <td>--logstring</td>\n  <td>-ls</td>\n  <td>[Optional, str] append this string to log file names for this run, as <logfilename>_<this_string>.log</td>\n</tr>\n<tr>\n  <td>--year</td>\n  <td>-y</td>\n  <td>[Optional, int] year number (YYYY) to use to select L1b files. The year number is used by the chain's finder</td>\n</tr>\n<tr>\n  <td>--month</td>\n  <td>-m</td>\n  <td>[Optional, int] month number (1,12) to use to select L1b files. The month number is used by the chain's finder algorithms if they support month selections</td>\n</tr>\n<tr>\n  <td>--find_opts</td>\n  <td>-fo</td>\n  <td>[Optional, str,str]  Comma separated list of string options to pass to l1b finder algorithms. Examples for cryotempo chain: -fo sin_only : only select SIN L1b files. -fo lrm_only : only select LRM L1b files. These are chain specific and may have different meanings for other chains</td>\n</tr>\n<tr>\n  <td>--cs2testdir</td>\n  <td>-ct</td>\n  <td>[Optional] for quick CS2 tests, uses default CS2 L1b directory: $CLEV2ER_BASE_DIR/testdata/cs2/l1bfiles</td>\n</tr>\n</tbody>\n</table>\n"}, {"fullname": "clev2er.tools.run_chain", "modulename": "clev2er.tools.run_chain", "kind": "module", "doc": "<p>Main command line run control tool for CLEV2ER algorithm framework chains</p>\n\n<h6 id=\"setup-requires\">Setup requires:</h6>\n\n<blockquote>\n  <p>Set CLEV2ER_BASE_DIR to point to the base directory of the CLEV2ER framework\n      export CLEV2ER_BASE_DIR=/Users/alanmuir/software/clev2er</p>\n  \n  <p>PYTHONPATH to include $CLEV2ER_BASE_DIR/src\n      export PYTHONPATH=$PYTHONPATH:$CLEV2ER_BASE_DIR/src</p>\n</blockquote>\n\n<h6 id=\"example-usage\">Example usage:</h6>\n\n<blockquote>\n  <p>To list all command line options:</p>\n  \n  <p><code>python run_chain.py -h</code></p>\n  \n  <p>b) Run the cryotempo land ice chain on a single L2b file:</p>\n  \n  <p><code>python run_chain.py --name cryotempo -f         $CLEV2ER_BASE_DIR/testdata/cs2/l1bfiles/            CS_OFFL_SIR_LRM_1B_20200930T235609_20200930T235758_D001.nc</code></p>\n  \n  <p>a) Run the cryotempo land ice chain on all l1b files in \n     $CLEV2ER_BASE_DIR/testdata/cs2/l1bfiles</p>\n  \n  <p><code>python run_chain.py --name cryotempo --dir $CLEV2ER_BASE_DIR/testdata/cs2/l1bfiles</code></p>\n  \n  <p>Run with multi-processing and shared memory enabled (also can set these in main config):</p>\n  \n  <p><code>python run_chain.py --name cryotempo -d $CLEV2ER_BASE_DIR/testdata/cs2/l1bfiles -sm -mp</code></p>\n</blockquote>\n"}, {"fullname": "clev2er.tools.run_chain.exception_hook", "modulename": "clev2er.tools.run_chain", "qualname": "exception_hook", "kind": "function", "doc": "<p>log Exception traceback output to the error log, instead of just to the console\nWithout this, these error can get missed when the console is not checked</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">exc_type</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"ne\">BaseException</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exc_value</span><span class=\"p\">:</span> <span class=\"ne\">BaseException</span>,</span><span class=\"param\">\t<span class=\"n\">exc_traceback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">traceback</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.sort_file_by_number", "modulename": "clev2er.tools.run_chain", "qualname": "sort_file_by_number", "kind": "function", "doc": "<p>sort log file by N , where log lines contain the string [fN]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  log file path</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.insert_txtfile1_in_txtfile2_after_line_containing_string", "modulename": "clev2er.tools.run_chain", "qualname": "insert_txtfile1_in_txtfile2_after_line_containing_string", "kind": "function", "doc": "<p>Inserts txtfile1 in txtfile2 after line containing target_string</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file1 (str):</strong>  path of txt file1</li>\n<li><strong>file2 (str):</strong>  path of txt file2</li>\n<li><strong>target_string (str):</strong>  string to search for in file2 and insert contents of file1 after</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">target_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.append_file", "modulename": "clev2er.tools.run_chain", "qualname": "append_file", "kind": "function", "doc": "<p>appends contents of file1_path to end of  file2_path</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file1_path (str):</strong>  txt file to append</li>\n<li><strong>file2_path (str):</strong>  txt file to append to end of</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file1_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">file2_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.remove_strings_from_file", "modulename": "clev2er.tools.run_chain", "qualname": "remove_strings_from_file", "kind": "function", "doc": "<p>removes any string [fN] from the txt file</p>\n\n<pre><code>where N is any integer\n</code></pre>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filename (str):</strong>  file name</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.run_chain_on_single_file", "modulename": "clev2er.tools.run_chain", "qualname": "run_chain_on_single_file", "kind": "function", "doc": "<p>Runs the algorithm chain on a single L1b file.</p>\n\n<p>This function is run in a separate process if multi-processing is enabled.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b_file (str):</strong>  path of L1b file to process</li>\n<li><strong>alg_object_list (list[Algorithm]):</strong>  list of Algorithm objects</li>\n<li><strong>log (logging.Logger):</strong>  logging instance to use</li>\n<li><strong>log_queue (Queue):</strong>  Queue for multi-processing logging</li>\n<li><strong>rval_queue (Queue) :</strong>  Queue for multi-processing results</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple(bool,str): algorithms success (True) or Failure (False), '' or error string\n  for multi-processing return values are instead queued -> rval_queue for this process</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">l1b_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">alg_object_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span>,</span><span class=\"param\">\t<span class=\"n\">log_queue</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">bound</span> <span class=\"n\">method</span> <span class=\"n\">BaseContext</span><span class=\"o\">.</span><span class=\"n\">Queue</span> <span class=\"n\">of</span> <span class=\"o\">&lt;</span><span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">DefaultContext</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x10c0aa560</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">rval_queue</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">bound</span> <span class=\"n\">method</span> <span class=\"n\">BaseContext</span><span class=\"o\">.</span><span class=\"n\">Queue</span> <span class=\"n\">of</span> <span class=\"o\">&lt;</span><span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">DefaultContext</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x10c0aa560</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">filenum</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.mp_logger_process", "modulename": "clev2er.tools.run_chain", "qualname": "mp_logger_process", "kind": "function", "doc": "<p>executed in a separate process that performs logging\n   used for when multi-processing only</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>queue (Queue):</strong>  object created by multiprocessing.Queue()</li>\n<li><strong>config (dict):</strong>  main config dictionary for log file paths</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">queue</span>, </span><span class=\"param\"><span class=\"n\">config</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.run_chain", "modulename": "clev2er.tools.run_chain", "qualname": "run_chain", "kind": "function", "doc": "<p>Run the algorithm chain in algorithm_list on each L1b file in l1b_file_list\n   using the configuration settings in config</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b_file_list (list[str]):</strong>  list of l1b files paths to process</li>\n<li><strong>config (dict):</strong>  configuration dictionary. This is the named chain config and the\nmain config merged</li>\n<li><strong>algorithm_list (list[str]):</strong>  list of algorithm names</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple(bool,int,int, int) : (chain success or failure, number_of_errors,\n                            number of files processed, number of files skipped\n                            (for valid reasons))</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">l1b_file_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">algorithm_list</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">log</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.run_chain.main", "modulename": "clev2er.tools.run_chain", "qualname": "main", "kind": "function", "doc": "<p>main function for tool</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.tools.tests.test_run_chain", "modulename": "clev2er.tools.tests.test_run_chain", "kind": "module", "doc": "<p>pytest functions to test\nsrc/clev2er/tools/run_chain.py: runc_chain()</p>\n"}, {"fullname": "clev2er.tools.tests.test_run_chain.test_run_chain", "modulename": "clev2er.tools.tests.test_run_chain", "qualname": "test_run_chain", "kind": "function", "doc": "<p>pytest functions to test src/clev2er/tools/run_chain.py: runc_chain()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mp_enabled</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils", "modulename": "clev2er.utils", "kind": "module", "doc": "<p><strong>Utility Modules</strong></p>\n"}, {"fullname": "clev2er.utils.cs2", "modulename": "clev2er.utils.cs2", "kind": "module", "doc": "<p><strong>CS2 specific modules</strong></p>\n"}, {"fullname": "clev2er.utils.cs2.retrackers", "modulename": "clev2er.utils.cs2.retrackers", "kind": "module", "doc": "<p><strong>CS2 Retrackers</strong></p>\n"}, {"fullname": "clev2er.utils.cs2.retrackers.cs2_sin_max_coherence_retracker", "modulename": "clev2er.utils.cs2.retrackers.cs2_sin_max_coherence_retracker", "kind": "module", "doc": "<p>CS2 Maximum Coherence Retracker for SARin waveforms only\nAdapted by A.Muir (CPOM) from M.McMillan (CPOM) Leading Edge Detection and\nJ.Aublanc (CLS) LMC Retracker from Aublanc et al, 2021 (Ice Sheet Topography from a\nNew CryoSat-2 SARIn Processing Chain, and Assessment by Comparison to ICESat-2 over\nAntarctica)</p>\n\n<h2 id=\"functions\">Functions:</h2>\n\n<p>def retrack_cs2_sin_max_coherence(l1b_file=None,waveforms=None,coherence=None,\nretrack_smooth_wf=False, plot_flag=False,\nmeasurement_index=None, include_measurements_array=None)</p>\n\n<h6 id=\"used-as\">Used as:</h6>\n\n<blockquote>\n  <p>dr_bin_mc,dr_meters_mc,leading_edge_start,leading_edge_stop, pwr_at_rtrk_point_mc,\n  n_retrack_mc_failed=    retrack_cs2_sin_max_coherence(l1b_file=\n  '/path/to/CS_OFFL_SIR_LRM_1B_20190504T122726_20190504T123244_D001.nc')</p>\n  \n  <p>or by passing in waveforms directly:</p>\n  \n  <p>nc = Dataset('/path/to/CS_OFFL_SIR_LRM_1B_20190504T122726_20190504T123244_D001.nc')\n  wfs = nc.variables['pwr_waveform_20_ku'][:].data\n  coh = nc.variables['coherence_waveform_20_ku'][:].data</p>\n  \n  <p>dr_bin_tfmra,dr_meters_tfmra,dr_bin_mc,dr_meters_mc,leading_edge_start,\n  leading_edge_stop, n_retrack_tfmra_failed, n_retrack_mc_failed=        retrack_tfmra_tcog_waveforms_cs2(waveforms=wfs,coherence=coh)</p>\n</blockquote>\n\n<h2 id=\"unit-tests\">Unit Tests:</h2>\n\n<p>The __main__ section includes the unit tests of the retracker. These are run from the\ncommand line as follows:</p>\n\n<p>% cs2_tfmra_tcof_retracker.py -h     :  for all command line options of the unit tests\nExamples:\n% cs2_tfmra_tcof_retracker.py --lrmtest  : run unit test on a sample L1b LRM file.\nResults are compared to Matlab outputs from original code.\n% cs2_tfmra_tcof_retracker.py --sintest  : run unit test on a sample L1b SIN file.\nResults are compared to Matlab outputs from original code.\n% cs2_tfmra_tcof_retracker.py --lrmtest --debug : enable debug mode, which prints\nresults from intermediate retracker steps\n% cs2_tfmra_tcof_retracker.py --lrmtest --plot  : enable plot mode, which plots input\n% waveforms, leading edge, maximum peak, and retracker points\n% cs2_tfmra_tcof_retracker.py --lrmtest --plot  --index 312  --debug : just\nretrack measurement number 312 (index count from 0)\n% cs2_tfmra_tcof_retracker.py --infile /path/to/l1bfile --plot : test with another\n Baseline-D L1b file\n% cs2_tfmra_tcof_retracker.py --infile /path/to/l1bfile --outfile\n/path/to/output_results.txt : write retracker output results to text file.\n        Results are formatted as 1 waveform retracking result per line: tfmra epoch\n        (bins) tfmra epoch (m) tcog epoch (bins) tcog epoch (m)</p>\n"}, {"fullname": "clev2er.utils.cs2.retrackers.cs2_sin_max_coherence_retracker.InvalidArraySizeError", "modulename": "clev2er.utils.cs2.retrackers.cs2_sin_max_coherence_retracker", "qualname": "InvalidArraySizeError", "kind": "class", "doc": "<p>Exception for invalid array sizes</p>\n", "bases": "builtins.Exception"}, {"fullname": "clev2er.utils.cs2.retrackers.cs2_sin_max_coherence_retracker.retrack_cs2_sin_max_coherence", "modulename": "clev2er.utils.cs2.retrackers.cs2_sin_max_coherence_retracker", "qualname": "retrack_cs2_sin_max_coherence", "kind": "function", "doc": "<p>% SUMMARY\n%   Retracking of CS2 SIN waveforms using Max Coherence Retracker\n%   Reference: CryoSat-2 Product Handbook Baseline D1.1, C2-LI-ACS-ESL-5319.\n%   This is an adapted python port of Matlab original by M.McMillan for Leading Edge\n%   Detection, and\n%   the LMC retracker in Aublanc et al, 2021 (Ice Sheet Topography from a\n%   New CryoSat-2 SARIn Processing Chain, and Assessment by Comparison to ICESat-2\n%   over Antarctica)\n% ------------------------------------------------------------------------</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b_file (str) :</strong>  file name of L1b file</li>\n<li><strong>waveforms (np.ndarray):</strong>  instead of reading from L1b file, you can pass in a\nnumpy.ndarray of shape (num_measurements, waveform_numbins).\nwaveform_numbins is 128 (LRM) or 1024 (SIN)</li>\n<li><strong>coherence (np.ndarray):</strong>  SIN only coherence waveform for use in maximum coherence\nretracking</li>\n<li><strong>retrack_smooth_wf (bool, def=False):</strong>  specify whether to retrack raw (False) or\nsmoothed waveform (True)</li>\n<li><strong>plot_flag (bool, def=False):</strong>  set to True to plot waveforms and retracking points\nfor testing/debugging purposes\n(Note, blocks until each plot closed)</li>\n<li><strong>measurement_index (int, def=None):</strong>  if not None, only retrack this measurement index\n(from 0). Used for debugging</li>\n<li><strong>include_measurements_array (List[bool]):</strong>  None or [array of boolean values of size equal to\nnumber of waveforms]. if not None, only retrack waveforms\ncorresponding to True values in this array</li>\n<li><strong>ref_bin_ind_sin (int, def=512) :</strong>  reference bin index, from CS2 Baseline-D User\nManual, p36;</li>\n<li><strong>wf_oversampling_factor (int) :</strong>  waveform oversampling factor (default=100)</li>\n<li><strong>noise_sample_limit (int, def=6) :</strong>  maximum bin used to compute noise statistics</li>\n<li><strong>noise_threshold (float,def=0.3) :</strong>  if mean amplitude in noise bins exceeds threshold then\nreject waveform</li>\n<li><strong>savitsky_golay_width (int, def=9):</strong>  Savitsky Golay smoothing width</li>\n<li><strong>savitsky_golay_poly_order (int, def=3):</strong>  Savitsky Golay polynomial order</li>\n<li><strong>le_id_threshold (float, def=0.05) :</strong>  power must exceed thermal noise by this amount to be\nidentified as a leading edge</li>\n<li><strong>le_dp_threshold (float, def=0.2):</strong>  define threshold on normalised amplitude change which is\nrequired to be accepted as lead edge</li>\n<li><strong>coherence_smoothing_width (int, def-9):</strong>  coherence boxcar average smoothing width</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple: (dr_bin_mc, dr_meters_mc, leading_edge_start, leading_edge_stop,pwr_at_rtrk_point_mc,\n          n_retrack_mc_failed, retrack_flag)\n          dr_bin_mc (List[float]) : max coherence epoch relative to nominal tracking point\n                                    in bins\n          dr_meters_mc (List[float]) : max coherence epoch relative to nominal tracking point\n                                    in meters\n          leading_edge_start (List[List[float]]): leading edge start coordinates\n                                              column 1 = bin  |  column 2 = normalised power\n          leading_edge_stop (List[List[float]]): leading edge stop coordinates\n                                              column 1 = bin  |  column 2 = normalised power\n          pwr_at_rtrk_point_mc (List[float]): power in counts at retracking point\n          n_retrack_mc_failed (int): number of waveforms were retracking failed\n          retrack_flag (List[List[int]]): returned retracker flags for each waveform indicate\n                      how retracking failed | 6 x t |\n                          column 1 (index 0): 0 or 1 max amplitude is 0 so skippings\n                                              or mean noise above a predefined threshold\n                          column 2 (index 1): 0 or 1 if no samples are sufficiently above the\n                              noise floor\n                          column 3 (index 2): 0 or 1 if no peak identified\n                          column 4 (index 3): 0 or 1 if no leading edge found by end of\n                          waveform\n                          column 5 (index 4): 0 (currently unused)\n                          column 6 (index 5): 0 or 1 if  No retracking point retrieved</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">l1b_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">waveforms</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">coherence</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">retrack_smooth_wf</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">plot_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">measurement_index</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_measurements_array</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ref_bin_ind_sin</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">512</span>,</span><span class=\"param\">\t<span class=\"n\">wf_oversampling_factor</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">noise_sample_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>,</span><span class=\"param\">\t<span class=\"n\">noise_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.3</span>,</span><span class=\"param\">\t<span class=\"n\">savitsky_golay_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>,</span><span class=\"param\">\t<span class=\"n\">savitsky_golay_poly_order</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">le_id_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">le_dp_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">coherence_smoothing_width</span><span class=\"o\">=</span><span class=\"mi\">9</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.retrackers.cs2_tcog_retracker", "modulename": "clev2er.utils.cs2.retrackers.cs2_tcog_retracker", "kind": "module", "doc": "<p>TCOG retracker for CS2 waveforms from CS2 L1b (baseline-D/E only)\npython port of Matlab original by M.McMillan (CPOM, Lancaster)</p>\n\n<p>Added Savitsky-Golay waveform smoothing (Aublanc et al, 2021)</p>\n\n<h2 id=\"functions\">Functions:</h2>\n\n<p>def retrack_tcog_waveforms_cs2(l1b_file,retrack_threshold_lrm,retrack_threshold_sin,\nretrack_smooth_wf=False, plot_flag=0, measurement_index=None):</p>\n\n<h6 id=\"used-as\">Used as:</h6>\n\n<blockquote>\n  <p>dr_bin_tcog,dr_meters_tcog,leading_edge_start,leading_edge_stop, n_retracker_failures=        retrack_tcog_waveforms_cs2(l1b_file=\n      '/path/to/CS_OFFL_SIR_LRM_1B_20190504T122726_20190504T123244_D001.nc',\n                           retrack_threshold_lrm=0.2,\n                           retrack_threshold_sin=0.5,\n                           debug_flag=False,\n                           plot_flag=0,\n                           measurement_index=None)</p>\n  \n  <p>or by passing in waveforms directly:</p>\n  \n  <p>nc = Dataset('/path/to/CS_OFFL_SIR_LRM_1B_20190504T122726_20190504T123244_D001.nc')\n  wfs = nc.variables['pwr_waveform_20_ku'][:].data</p>\n  \n  <p>dr_bin_tcog,dr_meters_tcog,leading_edge_start,leading_edge_stop,  n_retracker_failures=        retrack_tcog_waveforms_cs2(waveforms=wfs,\n                           retrack_threshold_lrm=0.2,\n                           retrack_threshold_sin=0.5,\n                           debug_flag=False,\n                           plot_flag=0,\n                           measurement_index=None)</p>\n</blockquote>\n\n<h2 id=\"unit-tests\">Unit Tests:</h2>\n\n<p>The __main__ section includes the unit tests of the retracker. These are run\nfrom the command line as follows:</p>\n\n<p>% cs2_tcog_retracker.py -h     :  for all command line options of the unit tests\nExamples:\n% cs2_tcog_retracker.py --lrmtest  : run unit test on a sample L1b LRM file.\nResults are compared to Matlab outputs from original code.\n% cs2_tcog_retracker.py --sintest  : run unit test on a sample L1b SIN file\nResults are compared to Matlab outputs from original code.\n% cs2_tcog_retracker.py --lrmtest --debug : enable debug mode, which prints results\nfrom intermediate retracker steps\n% cs2_tcog_retracker.py --lrmtest --plot  : enable plot mode, which plots input waveforms\nleading edge, maximum peak, and retracker points\n% cs2_tcog_retracker.py --lrmtest --plot  --index 312  --debug : just retrack measurement\nnumber 312 (index count from 0)\n% cs2_tcog_retracker.py --infile /path/to/l1bfile --plot : test with another\nBaseline-D L1b file\n% cs2_tcog_retracker.py --infile /path/to/l1bfile --outfile /path/to/output_results.txt\n: write retracker output results to text file.\n        Results are formatted as 1 waveform retracking result per line: tfmra epoch\n        (bins) tfmra epoch (m) tcog epoch (bins) tcog epoch (m)</p>\n"}, {"fullname": "clev2er.utils.cs2.retrackers.cs2_tcog_retracker.InvalidArraySizeError", "modulename": "clev2er.utils.cs2.retrackers.cs2_tcog_retracker", "qualname": "InvalidArraySizeError", "kind": "class", "doc": "<p>Exception for invalid array sizes</p>\n", "bases": "builtins.Exception"}, {"fullname": "clev2er.utils.cs2.retrackers.cs2_tcog_retracker.retrack_tcog_waveforms_cs2", "modulename": "clev2er.utils.cs2.retrackers.cs2_tcog_retracker", "qualname": "retrack_tcog_waveforms_cs2", "kind": "function", "doc": "<h6 id=\"purpose\">Purpose:</h6>\n\n<blockquote>\n  <p>Retracking of CS2 LRM and SIN waveforms TCOG\n  Reference: CryoSat-2 Product Handbook Baseline D1.1, C2-LI-ACS-ESL-5319.\n  This is an adapted python port of Matlab original by M.McMillan</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l1b_file(str,def=None):</strong>  l1b .nc file (must be Baseline-D, NetCDF format)\nLRM or SIN, file names must contain SIR_SIN_1B, or SIR_LRM_1B</li>\n<li><strong>waveforms(np.ndarray,def=None):</strong>  instead of reading from L1b file, you can pass in a\nnumpy.ndarray of shape (num_measurements, waveform_numbins).\nwaveform_numbins is 128 (LRM) or 1024 (SIN)\nThis is the array returned by\nnc.variables['pwr_waveform_20_ku'][:].data</li>\n<li><strong>retrack_threshold_lrm(float, def=0.2):</strong>  lrm retracker threshold</li>\n<li><strong>retrack_threshold_sin(float, def=0.5):</strong>  sin retracker threshold</li>\n<li><strong>retrack_smooth_wf(bool, def=False):</strong>  specify whether to retrack raw or smoothed waveform\nFalse - raw waveform  |  True - smoothed waveform</li>\n<li><strong>debug_flag(bool, def=False):</strong>  set to True to output intermediate debugging output text</li>\n<li><strong>plot_flag(bool, def=False):</strong>  set to True to plot waveforms and retracking points for testing</li>\n<li><strong>measurement_index(int, def=None):</strong>  if not None, only retrack this measurement index (from 0)</li>\n<li><strong>include_measurements_array(List[bool],def=None):</strong>  None or [array of boolean values of size\n equal to number of waveforms].\nif not None, only retrack waveforms\ncorresponding to True values in this array</li>\n<li><strong>savitsky_golay_smoothing(bool, def=True):</strong>  if True then use a 1-d Savitsky-Golay filter to\nsmooth waveform</li>\n<li><strong>savitsky_golay_width(int, def=9):</strong>  Savitsky Golay smoothing width</li>\n<li><strong>savitsky_golay_poly_order(int, def=3):</strong>  Savitsky Golay polynomial order</li>\n<li><strong>ref_bin_ind_lrm(int, def=64):</strong>  from CS2 Baseline-D User Manual, p36;</li>\n<li><strong>ref_bin_ind_sin(int, def=512):</strong>  from CS2 Baseline-D User Manual, p36</li>\n<li><strong>noise_sample_limit(int, def=6):</strong>  maximum bin used to compute noise statistics</li>\n<li><strong>wf_oversampling_factor(int,def=100):</strong>  waveform oversampling factor</li>\n<li><strong>noise_threshold(float, def=0.3):</strong>  if mean amplitude in noise bins exceeds threshold then\nreject waveform</li>\n<li><strong>le_id_threshold(float, def=0.05):</strong>  power must exceed thermal noise by this amount to be\nidentified as a leading edge</li>\n<li><strong>le_dp_threshold(float, def=0.20):</strong>  define threshold on normalised amplitude change which\nis required to be accepted as lead edge</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple (dr_bin_tcog, dr_meters_tcog, leading_edge_start, leading_edge_stop,\n  pwr_at_rtrk_point_tcog,n_retracker_failures,retrack_flag):\n      dr_bin_tcog (List[float]) : tcog epoch relative to nominal tracking point\n                                    in bins\n      dr_meters_tcog (List[float]) : tcog epoch relative to nominal tracking point\n                                  in meters\n      leading_edge_start (List[List[float]]): leading edge start coordinates\n                                          column 1 = bin  |  column 2 = normalised power\n      leading_edge_stop (List[List[float]]): leading edge stop coordinates\n                                          column 1 = bin  |  column 2 = normalised power\n      pwr_at_rtrk_point_tcog (List[float]): power in counts at retracking point\n      n_retracker_failures (int): number of waveforms were retracking failed\n      retrack_flag : returned retracker flags for each waveform indicate how\n                     retracking failed\n                     col 1 (index 0): 0 or 1 if noise &gt; threshold in noise gates\n                     col 2 (index 1): 0 or 1 if no samples are sufficiently above\n                                      the noise floor\n                     col 3 (index 2): 0 or 1 if no waveform peak can be identified\n                                      after the leading edge starts\n                     col 4 (index 3): 0 or 1 if no leading edge found by end of waveform\n                     col 5 (index 4): 0 (currently unused)\n                     col 6 (index 5): 0 or 1 if  TCOG retracking point could not be found</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">l1b_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">waveforms</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">retrack_threshold_lrm</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">retrack_threshold_sin</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">retrack_smooth_wf</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">debug_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">plot_flag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">measurement_index</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_measurements_array</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">savitsky_golay_smoothing</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">savitsky_golay_width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>,</span><span class=\"param\">\t<span class=\"n\">savitsky_golay_poly_order</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">ref_bin_ind_lrm</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>,</span><span class=\"param\">\t<span class=\"n\">ref_bin_ind_sin</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">512</span>,</span><span class=\"param\">\t<span class=\"n\">noise_sample_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>,</span><span class=\"param\">\t<span class=\"n\">wf_oversampling_factor</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">noise_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.3</span>,</span><span class=\"param\">\t<span class=\"n\">le_id_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">le_dp_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.retrackers.fastsmooth", "modulename": "clev2er.utils.cs2.retrackers.fastsmooth", "kind": "module", "doc": "<p>fastsmooth() : smoothing function port from Matlab</p>\n"}, {"fullname": "clev2er.utils.cs2.retrackers.fastsmooth.fastsmooth", "modulename": "clev2er.utils.cs2.retrackers.fastsmooth", "qualname": "fastsmooth", "kind": "function", "doc": "<p>port of Matlab fastsmooth function, Copyright (c) 2012, Thomas C. O'Haver\n<a href=\"https://uk.mathworks.com/matlabcentral/fileexchange/19998-fast-smoothing-function?s_tid=srchtitle\">https://uk.mathworks.com/matlabcentral/fileexchange/19998-fast-smoothing-function?s_tid=srchtitle</a>\nwith taper=1, edge=1 preset</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_array</strong>:    input 1-d array to be smoothed</li>\n<li><strong>smoothwidth</strong>:  smoothing width</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>smoothed 1-d array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_array</span>, </span><span class=\"param\"><span class=\"n\">smoothwidth</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.waveform_quality", "modulename": "clev2er.utils.cs2.waveform_quality", "kind": "module", "doc": "<p>**CS2 Waveform Quality Modules</p>\n"}, {"fullname": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks", "modulename": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks", "kind": "module", "doc": "<p>Waveform QC checks for CryoSat</p>\n"}, {"fullname": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks.sarin_waveform_qc_checks", "modulename": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks", "qualname": "sarin_waveform_qc_checks", "kind": "function", "doc": "<p>Inputs:\npwr_waveform_20_ku   :  numpy.ndarray of shape (num_measurements, waveform_numbins).\n                waveform_numbins is 128 (LRM) or 1024 (SIN)\n               This is the array returned by :\n               waveforms = nc.variables['pwr_waveform_20_ku'][:].data</p>\n\n<p>Return values:</p>\n\n<p>waveforms_ok :  boolean array of True (waveform ok), False (waveform not suitable)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pwr_waveform_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">echo_scale_factor_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">echo_scale_pwr_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">noise_power_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">total_power_threshold</span><span class=\"o\">=</span><span class=\"mf\">5e-17</span>,</span><span class=\"param\">\t<span class=\"n\">low_peakiness_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">low_position_max_power</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">high_position_max_power</span><span class=\"o\">=</span><span class=\"mi\">1011</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks.lrm_waveform_qc_checks", "modulename": "clev2er.utils.cs2.waveform_quality.waveform_qc_checks", "qualname": "lrm_waveform_qc_checks", "kind": "function", "doc": "<p>Inputs:\npwr_waveform_20_ku   :  numpy.ndarray of shape (num_measurements, waveform_numbins).\n                waveform_numbins is 128 (LRM) or 1024 (SIN)\n               This is the array returned by :\n               waveforms = nc.variables['pwr_waveform_20_ku'][:].data</p>\n\n<p>Return values:</p>\n\n<p>waveforms_ok :  boolean array of True (waveform ok), False (waveform not suitable)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pwr_waveform_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">echo_scale_factor_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">echo_scale_pwr_20_ku</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">total_power_threshold</span><span class=\"o\">=</span><span class=\"mf\">3e-16</span>,</span><span class=\"param\">\t<span class=\"n\">low_peakiness_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.85</span>,</span><span class=\"param\">\t<span class=\"n\">high_peakiness_threshold</span><span class=\"o\">=</span><span class=\"mf\">2.8</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems", "modulename": "clev2er.utils.dems", "kind": "module", "doc": "<p><strong>DEM class</strong></p>\n"}, {"fullname": "clev2er.utils.dems.dems", "modulename": "clev2er.utils.dems.dems", "kind": "module", "doc": "<p>clev2er.utils.dems.dems</p>\n\n<p>DEM class to read and interpolate DEMs</p>\n"}, {"fullname": "clev2er.utils.dems.dems.Dem", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem", "kind": "class", "doc": "<p>class to load and interpolate Polar DEMs</p>\n"}, {"fullname": "clev2er.utils.dems.dems.Dem.__init__", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.__init__", "kind": "function", "doc": "<p>class initialization function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  DEM name id, must be in global dem_list</li>\n<li><strong>filled (bool, optional):</strong>  Use filled version of DEM if True. Defaults to True.</li>\n<li><strong>config (dict, optional):</strong>  configuration dictionary, defaults to None</li>\n<li><strong>dem_dir (str, optional):</strong>  path of directory containing DEM. Defaults to None</li>\n<li><strong>store_in_shared_memory (bool, optional):</strong>  stores/accesses zdem array in SharedMemory</li>\n<li><strong>thislog (logging.Logger|None, optional):</strong>  attach to a different log instance</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  when name not in global dem_list</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dem_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">store_in_shared_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "clev2er.utils.dems.dems.Dem.get_geotiff_extent", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.get_geotiff_extent", "kind": "function", "doc": "<p>Get info from GeoTIFF on its extent</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fname (str):</strong>  path of GeoTIFF file</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  _description_</li>\n<li><strong>IOError:</strong>  _description_</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple(int,int,int,int,int,int,int): width,height,top_left,top_right,bottom_left,\n  bottom_right,pixel_width</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.get_filename", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.get_filename", "kind": "function", "doc": "<p>Find the path of the DEM file from dir and file names :\nFor the directory, it is chosen in order of preference:\na) self.config[\"dem_dirs\"][self.name], or\nb) supplied self.dem_dir, or\nc) default_dir\nThe file name is:\nfilename: is self.filled use filled_filename</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>default_dir (str):</strong>  default dir to find DEM file names</li>\n<li><strong>filename (str):</strong>  file name of DEM (not filled)</li>\n<li><strong>filled_filename (str):</strong>  file name of DEM (not filled)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str : path of DEM file</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>OSError :</strong>  directory or file not found</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">default_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filled_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.clean_up", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.clean_up", "kind": "function", "doc": "<p>Free up, close or release any shared memory or other resources associated\nwith DEM</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.load_geotiff", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.load_geotiff", "kind": "function", "doc": "<p>Load a GeoTIFF file</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>demfile (str):</strong>  path of GeoTIFF</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">demfile</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.load", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.load", "kind": "function", "doc": "<p>load the DEM</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: DEM loaded ok (True), failed (False)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.get_segment", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.get_segment", "kind": "function", "doc": "<p>return a cropped segment of the DEM, flattened or as a grid</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>segment_bounds (List):</strong>  [(minx,maxx),(miny,maxy)]</li>\n<li><strong>grid_xy (bool, optional):</strong>  return segment as a grid. Defaults to True.</li>\n<li><strong>flatten (bool, optional):</strong>  return segment as flattened list. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[np.ndarray, np.ndarray, np.ndarray]: (xdem,ydem,zdem)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">segment_bounds</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">grid_xy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">flatten</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.interp_dem", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.interp_dem", "kind": "function", "doc": "<p>Interpolate DEM to return elevation values corresponding to\n   cartesian x,y in DEM's projection or lat,lon values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x (np.ndarray):</strong>  x cartesian coordinates in the DEM's projection in m, or lat values</li>\n<li><strong>y (np.ndarray):</strong>  x cartesian coordinates in the DEM's projection in m, or lon values</li>\n<li><strong>method (str, optional):</strong>  linear, nearest, splinef2d. Defaults to \"linear\".</li>\n<li><strong>xy_is_latlon (bool, optional):</strong>  if True, x,y are lat, lon values. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: interpolated dem elevation values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;linear&#39;</span>, </span><span class=\"param\"><span class=\"n\">xy_is_latlon</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.gaussian_smooth", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.gaussian_smooth", "kind": "function", "doc": "<p>perform a gaussian smooth on the current loaded DEM\nsigma : degree of smoothing, def=1.0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.dems.dems.Dem.hillshade", "modulename": "clev2er.utils.dems.dems", "qualname": "Dem.hillshade", "kind": "function", "doc": "<p>Convert the DEM 'z_dem' values to a hillshade value between 0..255\nazimuth: angle in degrees (0..360)\npitch : angle in degrees (0..90)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">azimuth</span><span class=\"o\">=</span><span class=\"mi\">225</span>, </span><span class=\"param\"><span class=\"n\">pitch</span><span class=\"o\">=</span><span class=\"mi\">45</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.logging_funcs", "modulename": "clev2er.utils.logging_funcs", "kind": "module", "doc": "<p>logging helper functions:</p>\n\n<p>get_logger() :  sets up logging system to write log.ERROR, INFO, DEBUG to separate\n                log files, and also output to stdout</p>\n"}, {"fullname": "clev2er.utils.logging_funcs.get_logger", "modulename": "clev2er.utils.logging_funcs", "qualname": "get_logger", "kind": "function", "doc": "<p>Setup Logging handlers</p>\n\n<ul>\n<li>direct log.ERROR messages -> separate log file</li>\n<li>direct log.INFO (including log.ERROR, log.WARNING) -> separate log file</li>\n<li>direct log.DEBUG (including log.ERROR, log.WARNING, log.INFO) -> separate log file</li>\n<li>direct all allowed levels to stout</li>\n<li>set maximum allowed log level (applies to all outputs, default is log.INFO,</li>\n<li>ie no log.DEBUG messages will be included by default)</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>log_format (str) :</strong>  formatting string for logger</li>\n<li><strong>log_name (str) :</strong> </li>\n<li><strong>log_file_info (str) :</strong>  path of log file to use for INFO logs</li>\n<li><strong>log_file_error (str) :</strong>  path of log file to use for ERROR logs</li>\n<li><strong>log_file_debug (str) :</strong>  path of log file to use for DEBUG logs</li>\n<li><strong>default_log_level () :</strong>  default=logging.INFO</li>\n<li><strong>silent (bool) :</strong>  if True do not output to stdout, default=False</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>log object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">log_format</span><span class=\"o\">=</span><span class=\"s1\">&#39;[</span><span class=\"si\">%(levelname)-2s</span><span class=\"s1\">] : </span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> : </span><span class=\"si\">%(name)-12s</span><span class=\"s1\"> :  </span><span class=\"si\">%(message)s</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log_file_info</span><span class=\"o\">=</span><span class=\"s1\">&#39;info.log&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log_file_error</span><span class=\"o\">=</span><span class=\"s1\">&#39;err.log&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">log_file_debug</span><span class=\"o\">=</span><span class=\"s1\">&#39;debug.log&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">default_log_level</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">silent</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.masks", "modulename": "clev2er.utils.masks.masks", "kind": "module", "doc": "<p>Class for area masking</p>\n"}, {"fullname": "clev2er.utils.masks.masks.Mask", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask", "kind": "class", "doc": "<p>class to handle area masking</p>\n"}, {"fullname": "clev2er.utils.masks.masks.Mask.__init__", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.__init__", "kind": "function", "doc": "<p>class initialization</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_name (str):</strong>  mask name, must be in global mask_list</li>\n<li><strong>basin_numbers (list[int], optional):</strong>  list of grid values to select from grid masks\ndef=None</li>\n<li><strong>mask_path (str, optional):</strong>  override default path of mask data file</li>\n<li><strong>store_in_shared_memory (bool, optional):</strong>  stores/access mask array in SharedMemory</li>\n<li><strong>thislog (logging.Logger|None, optional):</strong>  attach to a different log instance</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mask_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">basin_numbers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mask_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">store_in_shared_memory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">thislog</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "clev2er.utils.masks.masks.Mask.load_netcdf_mask", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.load_netcdf_mask", "kind": "function", "doc": "<p>load mask array from netcdf grid masks</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_file (str) :</strong>  path of netcdf mask file</li>\n<li><strong>flip (bool, optional):</strong>  _description_. Defaults to True.</li>\n<li><strong>nc_mask_var (str):</strong>  variable name in netcdf file containing mask data, def='mask'</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">flip</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">nc_mask_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mask&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.masks.Mask.load_npz_mask", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.load_npz_mask", "kind": "function", "doc": "<p>load mask array from npz grid masks</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mask_file (str) :</strong>  path of npz mask file</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mask_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.masks.Mask.clean_up", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.clean_up", "kind": "function", "doc": "<p>Free up, close or release any shared memory or other resources associated\nwith DEM</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.masks.Mask.points_inside", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.points_inside", "kind": "function", "doc": "<p>find points inside mask</p>\n\n<p>returns array of bool indicating where (lat,lon) or (x,y) points  are inside a mask.\nIt also returns (x,y) of all points to save having to transform\nthem again.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray|list[float]):</strong>  list of latitude points</li>\n<li><strong>lons (np.ndarray|list[float]):</strong>  list of longitude points</li>\n<li><strong>basin_numbers (list[int,], optional):</strong>  list of basin numbers. Defaults to None.</li>\n<li><strong>inputs_are_xy (bool, optional):</strong>  lats, lons are already transformed to x,y.\nDefaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>inmask(np.ndarray),x(np.ndarray),y(np.ndarray) : true where inside mask,\n                                                   transformed x locations, (all points)\n                                                   transformed y locations (all points)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">basin_numbers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.masks.Mask.grid_mask_values", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.grid_mask_values", "kind": "function", "doc": "<p>Return the grid mask value at each input lats, lons interpolated grid location</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lats (np.ndarray):</strong>  array of latitude (N) values in degrees</li>\n<li><strong>lons (np.ndarray):</strong>  array of longitude (E) values in degrees</li>\n<li><strong>inputs_are_xy (bool):</strong>  inputs are x,y values (m) instead of latitude, longitude values</li>\n<li><strong>unknown_value (int):</strong>  value returned for locations outside mask, or where mask\ngrid includes an unclassified value (unknown_value will be\nsubstituted)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>mask_values (np.ndarray): grid mask value at each input lats, lons interpolated\n                       grid location or np.NaN is outside area</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">inputs_are_xy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">unknown_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.masks.masks.Mask.latlon_to_xy", "modulename": "clev2er.utils.masks.masks", "qualname": "Mask.latlon_to_xy", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lats</strong>:  latitude points in degs</li>\n<li><strong>lons</strong>:  longitude points in degrees E</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>x,y in polar stereo projection of mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lats</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">lons</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.shm", "modulename": "clev2er.utils.shm", "kind": "module", "doc": "<p>A test of loading DEMs using shared memory</p>\n"}, {"fullname": "clev2er.utils.shm.task", "modulename": "clev2er.utils.shm", "qualname": "task", "kind": "function", "doc": "<p>child process</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "clev2er.utils.uncertainty.calc_uncertainty", "modulename": "clev2er.utils.uncertainty.calc_uncertainty", "kind": "module", "doc": "<p>Cryo-TEMPO land ice elevation uncertainty functions</p>\n\n<p>calc_uncertainty()  : maps input slope values -> elevation uncertainty, using a table of</p>\n\n<p>uncertainty values per slope band</p>\n\n<p>Author: Alan Muir , DTU (initial design, coding)\nDate: 2021\nCopyright: UCL/MSSL/CPOM. Not to be used outside CPOM/MSSL without permission of author</p>\n"}, {"fullname": "clev2er.utils.uncertainty.calc_uncertainty.calc_uncertainty", "modulename": "clev2er.utils.uncertainty.calc_uncertainty", "qualname": "calc_uncertainty", "kind": "function", "doc": "<h6 id=\"purpose\">Purpose:</h6>\n\n<blockquote>\n  <p>return the corresponding interpolated uncertainties for a list of input slope values\n  from an uncertainty table, which contains the uncertainty values calculated for a\n  range of slope bands</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>slopes:</strong>  list of input slope values, type ndarray of float</li>\n<li><strong>uncertainty_table:</strong>  list of uncertainty values for each band of slope, the table corresponds</li>\n<li>to n slope bands between min_slope and max_slope, where n is</li>\n<li>(max_slope - min_slope) / len(uncertainty_table), type ndarray of float</li>\n<li><strong>min_slope:</strong>   minimum slope value of uncertainty_table</li>\n<li><strong>max_slope:</strong>   maximum slope value of uncertainty_table</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>uncertainty: list of uncertainty values corresponding to each input slope value,\n  type ndarray</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">slopes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">uncertainty_table</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">min_slope</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">max_slope</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();