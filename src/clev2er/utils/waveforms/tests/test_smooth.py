"""pytest for utils functions
    clev2er.utils.waveforms.smooth
"""

import logging

import numpy as np

from clev2er.utils.waveforms.smooth import smooth_waveform

logger = logging.getLogger(__name__)


def test_smooth_waveform() -> None:
    """test smooth_waveform() function from smooth.py

    Test plan:
    Run smooth function on a test waveform
    Check if the result is an array of floats
    Check if the waveform is close to the expected waveform
    """

    logger.info("Testing smooth function function")

    # sample wave taken from SAR file for 01/01/2018 at 03:22:21 (index 0 after filtering)
    test_wave = np.array(
        [
            8.0,
            7.0,
            8.0,
            8.0,
            8.0,
            10.0,
            10.0,
            12.0,
            8.0,
            12.0,
            8.0,
            14.0,
            8.0,
            16.0,
            9.0,
            19.0,
            9.0,
            22.0,
            8.0,
            25.0,
            9.0,
            29.0,
            9.0,
            34.0,
            9.0,
            39.0,
            10.0,
            46.0,
            10.0,
            54.0,
            11.0,
            68.0,
            11.0,
            85.0,
            15.0,
            109.0,
            17.0,
            144.0,
            25.0,
            203.0,
            34.0,
            303.0,
            60.0,
            503.0,
            111.0,
            928.0,
            260.0,
            3025.0,
            1299.0,
            22106.0,
            65535.0,
            39020.0,
            5172.0,
            5757.0,
            1510.0,
            1482.0,
            798.0,
            870.0,
            476.0,
            619.0,
            332.0,
            333.0,
            232.0,
            332.0,
            187.0,
            224.0,
            198.0,
            221.0,
            168.0,
            164.0,
            137.0,
            128.0,
            106.0,
            105.0,
            90.0,
            83.0,
            71.0,
            60.0,
            63.0,
            64.0,
            77.0,
            71.0,
            63.0,
            56.0,
            67.0,
            51.0,
            58.0,
            49.0,
            61.0,
            61.0,
            71.0,
            60.0,
            57.0,
            42.0,
            47.0,
            40.0,
            56.0,
            51.0,
            54.0,
            45.0,
            54.0,
            47.0,
            48.0,
            34.0,
            39.0,
            31.0,
            39.0,
            35.0,
            45.0,
            24.0,
            32.0,
            27.0,
            27.0,
            22.0,
            26.0,
            19.0,
            24.0,
            18.0,
            20.0,
            18.0,
            22.0,
            15.0,
            23.0,
            23.0,
            24.0,
            23.0,
            20.0,
            17.0,
        ]
    )

    target_wave = np.asarray(
        [
            8.00000000e00,
            7.66666667e00,
            7.66666667e00,
            8.00000000e00,
            8.66666667e00,
            9.33333333e00,
            1.06666667e01,
            1.00000000e01,
            1.06666667e01,
            9.33333333e00,
            1.13333333e01,
            1.00000000e01,
            1.26666667e01,
            1.10000000e01,
            1.46666667e01,
            1.23333333e01,
            1.66666667e01,
            1.30000000e01,
            1.83333333e01,
            1.40000000e01,
            2.10000000e01,
            1.56666667e01,
            2.40000000e01,
            1.73333333e01,
            2.73333333e01,
            1.93333333e01,
            3.16666667e01,
            2.20000000e01,
            3.66666667e01,
            2.50000000e01,
            4.43333333e01,
            3.00000000e01,
            5.46666667e01,
            3.70000000e01,
            6.96666667e01,
            4.70000000e01,
            9.00000000e01,
            6.20000000e01,
            1.24000000e02,
            8.73333333e01,
            1.80000000e02,
            1.32333333e02,
            2.88666667e02,
            2.24666667e02,
            5.14000000e02,
            4.33000000e02,
            1.40433333e03,
            1.52800000e03,
            8.81000000e03,
            2.96466667e04,
            4.22203333e04,
            3.65756667e04,
            1.66496667e04,
            4.14633333e03,
            2.91633333e03,
            1.26333333e03,
            1.05000000e03,
            7.14666667e02,
            6.55000000e02,
            4.75666667e02,
            4.28000000e02,
            2.99000000e02,
            2.99000000e02,
            2.50333333e02,
            2.47666667e02,
            2.03000000e02,
            2.14333333e02,
            1.95666667e02,
            1.84333333e02,
            1.56333333e02,
            1.43000000e02,
            1.23666667e02,
            1.13000000e02,
            1.00333333e02,
            9.26666667e01,
            8.13333333e01,
            7.13333333e01,
            6.46666667e01,
            6.23333333e01,
            6.80000000e01,
            7.06666667e01,
            7.03333333e01,
            6.33333333e01,
            6.20000000e01,
            5.80000000e01,
            5.86666667e01,
            5.26666667e01,
            5.60000000e01,
            5.70000000e01,
            6.43333333e01,
            6.40000000e01,
            6.26666667e01,
            5.30000000e01,
            4.86666667e01,
            4.30000000e01,
            4.76666667e01,
            4.90000000e01,
            5.36666667e01,
            5.00000000e01,
            5.10000000e01,
            4.86666667e01,
            4.96666667e01,
            4.30000000e01,
            4.03333333e01,
            3.46666667e01,
            3.63333333e01,
            3.50000000e01,
            3.96666667e01,
            3.46666667e01,
            3.36666667e01,
            2.76666667e01,
            2.86666667e01,
            2.53333333e01,
            2.50000000e01,
            2.23333333e01,
            2.30000000e01,
            2.03333333e01,
            2.06666667e01,
            1.86666667e01,
            2.00000000e01,
            1.83333333e01,
            2.00000000e01,
            2.03333333e01,
            2.33333333e01,
            2.33333333e01,
            2.23333333e01,
            2.00000000e01,
            1.70000000e01,
        ]
    )

    test_wave_smooth = smooth_waveform(test_wave, moving_avg_size=3)

    assert isinstance(test_wave_smooth, np.ndarray), "Result of function is not a numpy ndarray"
    assert (
        "float" in str(test_wave_smooth.dtype).lower()
    ), "Result of function does not contain float values"

    assert np.isclose(test_wave_smooth, target_wave, atol=0.5).all(), (
        "Result of function does not match the target wave"
        "(This does not mean its incorrect, but should be reviewed!)"
    )
